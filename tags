!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
exploring questions	myLatex/Project_Intent_letter.tex	/^\\section{exploring questions:}$/;"	s
match_positions	myUseful/Perl/BeginPerlBioinfor.pm	/^sub match_positions {$/;"	s
parseREBASE	myUseful/Perl/BeginPerlBioinfor.pm	/^sub parseREBASE {$/;"	s
IUB_to_regexp	myUseful/Perl/BeginPerlBioinfor.pm	/^sub IUB_to_regexp {$/;"	s
Rev_com_dna	myUseful/Perl/BeginPerlBioinfor.pm	/^sub Rev_com_dna {$/;"	s
countATGC	myUseful/Perl/BeginPerlBioinfor.pm	/^sub countATGC {$/;"	s
Condon2aa	myUseful/Perl/BeginPerlBioinfor.pm	/^sub Condon2aa {$/;"	s
dna2peptide	myUseful/Perl/BeginPerlBioinfor.pm	/^sub dna2peptide {$/;"	s
fasta2seq	myUseful/Perl/BeginPerlBioinfor.pm	/^sub fasta2seq {$/;"	s
Get_file_data	myUseful/Perl/BeginPerlBioinfor.pm	/^sub Get_file_data {$/;"	s
Print_format_seq	myUseful/Perl/BeginPerlBioinfor.pm	/^sub Print_format_seq {$/;"	s
os	myUseful/python/exCol.py	/^import os,getopt,sys$/;"	i
getopt	myUseful/python/exCol.py	/^import os,getopt,sys$/;"	i
sys	myUseful/python/exCol.py	/^import os,getopt,sys$/;"	i
argv	myUseful/python/exCol.py	/^argv = sys.argv[1:]$/;"	v
usage	myUseful/python/exCol.py	/^usage = "Usage : \\n python bakFile.py -n <> -f <inputfile> -o <output file >" $/;"	v
numCol	myUseful/python/exCol.py	/^    numCol     = arg$/;"	v
inputFile	myUseful/python/exCol.py	/^    inputFile  = arg$/;"	v
outFile	myUseful/python/exCol.py	/^    outFile    = arg$/;"	v
outH	myUseful/python/exCol.py	/^outH = open(outFile, 'w')$/;"	v
os	myUseful/python/bakFile.py	/^import os,getopt$/;"	i
getopt	myUseful/python/bakFile.py	/^import os,getopt$/;"	i
sys	myUseful/python/bakFile.py	/^import sys$/;"	i
shutil	myUseful/python/bakFile.py	/^import shutil$/;"	i
createBackupPath	myUseful/python/bakFile.py	/^def createBackupPath(dirList):$/;"	f
createScanPath	myUseful/python/bakFile.py	/^def createScanPath(dirList):$/;"	f
findFile	myUseful/python/bakFile.py	/^def findFile(dirList):$/;"	f
argv	myUseful/python/bakFile.py	/^argv = sys.argv[1:]$/;"	v
usage	myUseful/python/bakFile.py	/^usage = "Usage : \\n python bakFile.py -r <root directory> -b <backup dir> -s <search file> -t <back up file>"$/;"	v
rootDir	myUseful/python/bakFile.py	/^    rootDir      = arg$/;"	v
bakDir	myUseful/python/bakFile.py	/^    bakDir   = arg$/;"	v
oldFile	myUseful/python/bakFile.py	/^    oldFile  = arg	$/;"	v
bakFile	myUseful/python/bakFile.py	/^    bakFile  =  arg  $/;"	v
dirList	myUseful/python/bakFile.py	/^dirList = []$/;"	v
mrf	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^mrf = 'MRs.sorted.genes'$/;"	v
mtgf	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^mtgf = 'result_varFreq_v1_overlap.txt.genes'$/;"	v
pccerna	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^pccerna='\/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/database\/aclab\/huasheng_PC-ceRNET.txt' $/;"	v
dppi_a	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^dppi_a = {}$/;"	v
dppi_b	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^dppi_b = {}$/;"	v
intersect	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^def intersect(a, b): #function to get intersection of two lists$/;"	f
outfile	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^outfile = 'MR_mutgene_pccerna.txt' $/;"	v
outfile2	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^outfile2 = 'MR_mutgene_pccerna_ALL.txt' $/;"	v
fout	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^fout = open(outfile,'w') $/;"	v
fout2	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^fout2 = open('MR_mutGene_pccerna_stat.txt','w')$/;"	v
fout3	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^fout3 = open(outfile2,'w') $/;"	v
mtg_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^		mtg_p = []$/;"	v
mtg_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^			mtg_p = dppi_a[mtg]$/;"	v
mtg_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^			mtg_p = mtg_p + dppi_b[mtg]$/;"	v
flag	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^				flag =1 $/;"	v
mr_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^					mr_p =[]$/;"	v
mr_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^						mr_p = dppi_a[mr]$/;"	v
mr_p	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^						mr_p = mr_p + dppi_b[mr]$/;"	v
both	projAML/ceRNA/get_MRs_PCceRNA_Corr.py	/^					both = intersect(mr_p,mtg_p)$/;"	v
introduction	projAML/ysSweave/TARGET_AML.tex	/^\\section{introduction}$/;"	s
Results	projAML/ysSweave/TARGET_AML.tex	/^\\section{Results}$/;"	s
Checking for confounding factors	projAML/ysSweave/TARGET_AML.tex	/^\\subsection{Checking for confounding factors}$/;"	b
introduction	projAML/ysSweave/TARGET_AML-copy-copy.tex	/^\\section{introduction}$/;"	s
Results	projAML/ysSweave/TARGET_AML-copy-copy.tex	/^\\section{Results}$/;"	s
Checking for confounding factors	projAML/ysSweave/TARGET_AML-copy-copy.tex	/^\\subsection{Checking for confounding factors}$/;"	b
os	projAML/WXS/unipro2genename_preppi.py	/^import os$/;"	i
getopt	projAML/WXS/unipro2genename_preppi.py	/^import getopt $/;"	i
sys	projAML/WXS/unipro2genename_preppi.py	/^import sys $/;"	i
pprint	projAML/WXS/unipro2genename_preppi.py	/^import pprint$/;"	i
targetfile	projAML/WXS/unipro2genename_preppi.py	/^targetfile='temp_preppi_int_3col.txt';$/;"	v
mappingFile	projAML/WXS/unipro2genename_preppi.py	/^mappingFile='temp_unipro2genenamePrePPI.txt';$/;"	v
outputFile	projAML/WXS/unipro2genename_preppi.py	/^outputFile='preppi_int_3col_genename.txt';$/;"	v
dmap	projAML/WXS/unipro2genename_preppi.py	/^dmap = {}$/;"	v
cnt	projAML/WXS/unipro2genename_preppi.py	/^cnt = 1$/;"	v
lline	projAML/WXS/unipro2genename_preppi.py	/^             lline = line.split()$/;"	v
cnt	projAML/WXS/unipro2genename_preppi.py	/^                     cnt = cnt + 1$/;"	v
fout	projAML/WXS/unipro2genename_preppi.py	/^fout = open(outputFile,'w',1);$/;"	v
cnt	projAML/WXS/unipro2genename_preppi.py	/^cnt = 1;$/;"	v
crtline	projAML/WXS/unipro2genename_preppi.py	/^		crtline = line.split()$/;"	v
cnt	projAML/WXS/unipro2genename_preppi.py	/^			cnt = cnt + 1$/;"	v
subprocess	projAML/WXS/getPIDfreq.py	/^import subprocess$/;"	i
glob	projAML/WXS/getPIDfreq.py	/^import glob$/;"	i
os	projAML/WXS/getPIDfreq.py	/^import os$/;"	i
pid	projAML/WXS/getPIDfreq.py	/^pid="PASFEW"$/;"	v
f1	projAML/WXS/getPIDfreq.py	/^f1=pid + "-NoA.freq.temp"$/;"	v
f2	projAML/WXS/getPIDfreq.py	/^f2=pid + "-TuA.freq.temp"$/;"	v
f3	projAML/WXS/getPIDfreq.py	/^f3=pid + "-ReA.freq.temp"$/;"	v
dataNo	projAML/WXS/getPIDfreq.py	/^  dataNo=zip(*(line.strip().split('\\t') for line in input1))$/;"	v
dataTu	projAML/WXS/getPIDfreq.py	/^  dataTu=zip(*(line.strip().split('\\t') for line in input2))$/;"	v
dataRe	projAML/WXS/getPIDfreq.py	/^  dataRe=zip(*(line.strip().split('\\t') for line in input3))$/;"	v
mrf	projAML/WXS/get_MRsPrePPICorr.py	/^mrf = 'MRs.sorted.genes'$/;"	v
mtgf	projAML/WXS/get_MRsPrePPICorr.py	/^mtgf = 'result_varFreq_v1_overlap.txt.genes'$/;"	v
preppi	projAML/WXS/get_MRsPrePPICorr.py	/^preppi='\/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/database\/preppi\/preppi_int_3col_genename.txt_600_90' $/;"	v
dppi_a	projAML/WXS/get_MRsPrePPICorr.py	/^dppi_a = {}$/;"	v
dppi_b	projAML/WXS/get_MRsPrePPICorr.py	/^dppi_b = {}$/;"	v
intersect	projAML/WXS/get_MRsPrePPICorr.py	/^def intersect(a, b): #function to get intersection of two lists$/;"	f
outfile	projAML/WXS/get_MRsPrePPICorr.py	/^outfile = 'MR_mutgene_preppi.txt' $/;"	v
outfile2	projAML/WXS/get_MRsPrePPICorr.py	/^outfile2 = 'MR_mutgene_preppi_ALL.txt' $/;"	v
fout	projAML/WXS/get_MRsPrePPICorr.py	/^fout = open(outfile,'w') $/;"	v
fout2	projAML/WXS/get_MRsPrePPICorr.py	/^fout2 = open('MR_mutGene_preppi_stat.txt','w')$/;"	v
fout3	projAML/WXS/get_MRsPrePPICorr.py	/^fout3 = open(outfile2,'w') $/;"	v
mtg_p	projAML/WXS/get_MRsPrePPICorr.py	/^		mtg_p = []$/;"	v
mtg_p	projAML/WXS/get_MRsPrePPICorr.py	/^			mtg_p = dppi_a[mtg]$/;"	v
mtg_p	projAML/WXS/get_MRsPrePPICorr.py	/^			mtg_p = mtg_p + dppi_b[mtg]$/;"	v
flag	projAML/WXS/get_MRsPrePPICorr.py	/^				flag =1 $/;"	v
mr_p	projAML/WXS/get_MRsPrePPICorr.py	/^					mr_p =[]$/;"	v
mr_p	projAML/WXS/get_MRsPrePPICorr.py	/^						mr_p = dppi_a[mr]$/;"	v
mr_p	projAML/WXS/get_MRsPrePPICorr.py	/^						mr_p = mr_p + dppi_b[mr]$/;"	v
both	projAML/WXS/get_MRsPrePPICorr.py	/^					both = intersect(mr_p,mtg_p)$/;"	v
subprocess	projAML/WXS/getStat.py	/^import subprocess$/;"	i
glob	projAML/WXS/getStat.py	/^import glob$/;"	i
os	projAML/WXS/getStat.py	/^import os$/;"	i
flist	projAML/WXS/getStat.py	/^flist = sorted(glob.glob('*temp'))$/;"	v
fiter	projAML/WXS/getStat.py	/^fiter = iter(flist)$/;"	v
lines1	projAML/WXS/getStat.py	/^	    lines1 = f1.read().splitlines()$/;"	v
lines2	projAML/WXS/getStat.py	/^	    lines2 = f2.read().splitlines()$/;"	v
lines3	projAML/WXS/getStat.py	/^	    lines3 = f3.read().splitlines()$/;"	v
com13	projAML/WXS/getStat.py	/^	com13 = list(set(lines1) & set(lines3))$/;"	v
union13	projAML/WXS/getStat.py	/^	union13 = list(set(lines1) | set(lines3))$/;"	v
diff13	projAML/WXS/getStat.py	/^	diff13 = list(set(lines1) - set(com13))$/;"	v
bothfind	projAML/WXS/getStat.py	/^	bothfind = list(set(lines2) & set(diff13))$/;"	v
fout3	projAML/WXS/getStat.py	/^	fout3=open(fn1[0:6] + '_overlapReN_TN.txt', 'w+')$/;"	v
os	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import os$/;"	i
glob	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import glob$/;"	i
sys	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import sys$/;"	i
re	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import re$/;"	i
getopt	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import getopt$/;"	i
string	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^import string$/;"	i
argv	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^argv = sys.argv[1:]$/;"	v
inpd	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^    inpd      = arg$/;"	v
inptype	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^    inptype   = arg$/;"	v
outp	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^    outp      = arg								$/;"	v
fnames	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^fnames = ([file for root, dirs, files in os.walk(inpd)$/;"	v
outpf	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^outpf	    = open(outp,'w') $/;"	v
flag_header	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^flag_header = 1 $/;"	v
cnt_file	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^cnt_file    = 0$/;"	v
pid	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^  pid	    = fname.split(".")[0][:9]$/;"	v
cnt_file	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^  cnt_file  = cnt_file + 1$/;"	v
chr_pos	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^  chr_pos     = []$/;"	v
info_pid	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^  info_pid  = []$/;"	v
line_temp	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^	line_temp = line.strip().split("\\t") $/;"	v
info	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^	    info	      = info.split(";")$/;"	v
dp4	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^		dp4	      = a$/;"	v
dp4	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^		dp4	      = map(int,string.replace(dp4,"DP4=","").split(","))$/;"	v
info	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^		info          = str(dp4[0] + dp4[1]) + "\/" + str(dp4[2] + dp4[3])$/;"	v
info	projAML/WXS/test/genSomatciMutationForAllPatients.py	/^	    info	      = info.split(":")[0]$/;"	v
os	projAML/WXS/test/genHeatmap.py	/^import os$/;"	i
sys	projAML/WXS/test/genHeatmap.py	/^import sys$/;"	i
operator	projAML/WXS/test/genHeatmap.py	/^import operator$/;"	i
pd	projAML/WXS/test/genHeatmap.py	/^import pandas as pd$/;"	i
inp	projAML/WXS/test/genHeatmap.py	/^inp  = 'ALL.NoAlt_0_fisher_exact.txt'$/;"	v
outp	projAML/WXS/test/genHeatmap.py	/^outp = 'ALL.NoAlt_0_fisher_exact.txt.matrix'$/;"	v
itemIndexList	projAML/WXS/test/genHeatmap.py	/^itemIndexList = [0,1,2,8,10,21]$/;"	v
dataArray	projAML/WXS/test/genHeatmap.py	/^dataArray = {}$/;"	v
header	projAML/WXS/test/genHeatmap.py	/^      header = line.strip().split()$/;"	v
pidType	projAML/WXS/test/genHeatmap.py	/^      pidType = pidType[:10]$/;"	v
dataDF	projAML/WXS/test/genHeatmap.py	/^dataDF = Series(dataArray,index= ['chrom_pos', 'gene', 'pidType', 'func', 'pvalue'])$/;"	v
dataNew	projAML/WXS/test/genHeatmap.py	/^dataNew = dataDF['pvalue']$/;"	v
sys	projAML/WXS/mergeTuReFinal.py	/^import sys$/;"	i
pid	projAML/WXS/mergeTuReFinal.py	/^pid=sys.argv[1]$/;"	v
inpT	projAML/WXS/mergeTuReFinal.py	/^  inpT = pid + "-Tu.somatic.FINAL"$/;"	v
inpR	projAML/WXS/mergeTuReFinal.py	/^  inpR = pid + "-Re.somatic.FINAL"$/;"	v
outT	projAML/WXS/mergeTuReFinal.py	/^  outT = pid + "_TuOnly.txt"$/;"	v
out3	projAML/WXS/mergeTuReFinal.py	/^  out3 = pid + "_CommTuRe.txt"$/;"	v
outR	projAML/WXS/mergeTuReFinal.py	/^  outR = pid + "_ReOnly.txt"$/;"	v
chrPosArray	projAML/WXS/mergeTuReFinal.py	/^chrPosArray = []$/;"	v
valArray	projAML/WXS/mergeTuReFinal.py	/^valArray = []$/;"	v
outfT	projAML/WXS/mergeTuReFinal.py	/^outfT = open(outT, 'w')$/;"	v
outfR	projAML/WXS/mergeTuReFinal.py	/^outfR = open(outR, 'w')$/;"	v
outf3	projAML/WXS/mergeTuReFinal.py	/^outf3 = open(out3, 'w')$/;"	v
tempKey	projAML/WXS/mergeTuReFinal.py	/^      tempKey = chrom + "_" + pos$/;"	v
header	projAML/WXS/mergeTuReFinal.py	/^      header = tempKey + "\\t" + val$/;"	v
tempKey	projAML/WXS/mergeTuReFinal.py	/^      tempKey = chrom + "_" + pos$/;"	v
idx	projAML/WXS/mergeTuReFinal.py	/^        idx = chrPosArray.index(tempKey)$/;"	v
os	projAML/WXS/genGermlineMutationForAllPatients.py	/^import os$/;"	i
glob	projAML/WXS/genGermlineMutationForAllPatients.py	/^import glob$/;"	i
sys	projAML/WXS/genGermlineMutationForAllPatients.py	/^import sys$/;"	i
re	projAML/WXS/genGermlineMutationForAllPatients.py	/^import re$/;"	i
getopt	projAML/WXS/genGermlineMutationForAllPatients.py	/^import getopt$/;"	i
string	projAML/WXS/genGermlineMutationForAllPatients.py	/^import string$/;"	i
argv	projAML/WXS/genGermlineMutationForAllPatients.py	/^argv = sys.argv[1:]$/;"	v
inpd	projAML/WXS/genGermlineMutationForAllPatients.py	/^    inpd      = arg$/;"	v
inptype	projAML/WXS/genGermlineMutationForAllPatients.py	/^    inptype   = arg$/;"	v
outp	projAML/WXS/genGermlineMutationForAllPatients.py	/^    outp      = arg								$/;"	v
fnames	projAML/WXS/genGermlineMutationForAllPatients.py	/^fnames = ([file for root, dirs, files in os.walk(inpd)$/;"	v
outp	projAML/WXS/genGermlineMutationForAllPatients.py	/^outp  = os.getcwd() + "\/" + outp$/;"	v
outpf	projAML/WXS/genGermlineMutationForAllPatients.py	/^outpf	    = open(outp,'w') $/;"	v
flag_header	projAML/WXS/genGermlineMutationForAllPatients.py	/^    flag_header = 1 $/;"	v
cnt_file	projAML/WXS/genGermlineMutationForAllPatients.py	/^cnt_file    = 0$/;"	v
pid	projAML/WXS/genGermlineMutationForAllPatients.py	/^  pid	    = fname.split(".")[0][:9]$/;"	v
cnt_file	projAML/WXS/genGermlineMutationForAllPatients.py	/^  cnt_file  = cnt_file + 1$/;"	v
chr_pos	projAML/WXS/genGermlineMutationForAllPatients.py	/^  chr_pos     = []$/;"	v
info_pid	projAML/WXS/genGermlineMutationForAllPatients.py	/^  info_pid  = []$/;"	v
line_temp	projAML/WXS/genGermlineMutationForAllPatients.py	/^	line_temp = line.strip().split("\\t") $/;"	v
info	projAML/WXS/genGermlineMutationForAllPatients.py	/^	    info	      = info.split(";")$/;"	v
dp4	projAML/WXS/genGermlineMutationForAllPatients.py	/^	          dp4	      = a$/;"	v
dp4	projAML/WXS/genGermlineMutationForAllPatients.py	/^		  dp4	      = map(int,string.replace(dp4,"DP4=","").split(","))$/;"	v
info	projAML/WXS/genGermlineMutationForAllPatients.py	/^		  info          = str(dp4[2] + dp4[3]) + "\/" + str(dp4[0] + dp4[1])$/;"	v
info	projAML/WXS/genGermlineMutationForAllPatients.py	/^	    info	        = info.split(":")[0]$/;"	v
dp4	projAML/WXS/genGermlineMutationForAllPatients.py	/^	            dp4  = map(int,string.replace(element,"I16=","").split(",")[:4])$/;"	v
info	projAML/WXS/genGermlineMutationForAllPatients.py	/^	            info = str(dp4[2] + dp4[3]) + "\/" + str(dp4[0] + dp4[1])$/;"	v
info	projAML/WXS/genGermlineMutationForAllPatients.py	/^	    info = str(info3) + "\/"+ str(int(info1) - int(info2))$/;"	v
flag_header	projAML/WXS/genGermlineMutationForAllPatients.py	/^         flag_header = 0$/;"	v
os	projAML/WXS/genSomatciMutationForAllPatients.py	/^import os$/;"	i
glob	projAML/WXS/genSomatciMutationForAllPatients.py	/^import glob$/;"	i
sys	projAML/WXS/genSomatciMutationForAllPatients.py	/^import sys$/;"	i
re	projAML/WXS/genSomatciMutationForAllPatients.py	/^import re$/;"	i
getopt	projAML/WXS/genSomatciMutationForAllPatients.py	/^import getopt$/;"	i
string	projAML/WXS/genSomatciMutationForAllPatients.py	/^import string$/;"	i
argv	projAML/WXS/genSomatciMutationForAllPatients.py	/^argv = sys.argv[1:]$/;"	v
inpd	projAML/WXS/genSomatciMutationForAllPatients.py	/^    inpd      = arg$/;"	v
inptype	projAML/WXS/genSomatciMutationForAllPatients.py	/^    inptype   = arg$/;"	v
outp	projAML/WXS/genSomatciMutationForAllPatients.py	/^    outp      = arg								$/;"	v
fnames	projAML/WXS/genSomatciMutationForAllPatients.py	/^fnames = ([file for root, dirs, files in os.walk(inpd)$/;"	v
outp	projAML/WXS/genSomatciMutationForAllPatients.py	/^outp  = os.getcwd() + "\/" + outp$/;"	v
outpf	projAML/WXS/genSomatciMutationForAllPatients.py	/^outpf	    = open(outp,'w') $/;"	v
flag_header	projAML/WXS/genSomatciMutationForAllPatients.py	/^    flag_header = 1 $/;"	v
cnt_file	projAML/WXS/genSomatciMutationForAllPatients.py	/^cnt_file    = 0$/;"	v
pid	projAML/WXS/genSomatciMutationForAllPatients.py	/^  pid	    = fname.split(".")[0][:9]$/;"	v
cnt_file	projAML/WXS/genSomatciMutationForAllPatients.py	/^  cnt_file  = cnt_file + 1$/;"	v
chr_pos	projAML/WXS/genSomatciMutationForAllPatients.py	/^  chr_pos     = []$/;"	v
info_pid	projAML/WXS/genSomatciMutationForAllPatients.py	/^  info_pid  = []$/;"	v
line_temp	projAML/WXS/genSomatciMutationForAllPatients.py	/^	line_temp = line.strip().split("\\t") $/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients.py	/^	    info	      = info.split(";")$/;"	v
dp4	projAML/WXS/genSomatciMutationForAllPatients.py	/^	          dp4	      = a$/;"	v
dp4	projAML/WXS/genSomatciMutationForAllPatients.py	/^		  dp4	      = map(int,string.replace(dp4,"DP4=","").split(","))$/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients.py	/^		  info          = str(dp4[2] + dp4[3]) + "\/" + str(dp4[0] + dp4[1])$/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients.py	/^	    info	        = info.split(":")[0]$/;"	v
dp4	projAML/WXS/genSomatciMutationForAllPatients.py	/^	            dp4  = map(int,string.replace(element,"I16=","").split(",")[:4])$/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients.py	/^	            info = str(dp4[2] + dp4[3]) + "\/" + str(dp4[0] + dp4[1])$/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients.py	/^	    info = str(info3) + "\/"+ str(int(info1) - int(info2))$/;"	v
flag_header	projAML/WXS/genSomatciMutationForAllPatients.py	/^         flag_header = 0$/;"	v
Introduction	projAML/WXS/prezLab0923.tex	/^\\section{Introduction}$/;"	s
getopt	projAML/WXS/mergePIDfreq.py	/^import getopt $/;"	i
sys	projAML/WXS/mergePIDfreq.py	/^import sys $/;"	i
config	projAML/WXS/mergePIDfreq.py	/^config = { $/;"	v
dict_a	projAML/WXS/mergePIDfreq.py	/^dict_a = {};$/;"	v
dict_b	projAML/WXS/mergePIDfreq.py	/^dict_b = {};$/;"	v
dict_c	projAML/WXS/mergePIDfreq.py	/^dict_c = {};$/;"	v
dict_key	projAML/WXS/mergePIDfreq.py	/^dict_key = {};$/;"	v
f	projAML/WXS/mergePIDfreq.py	/^f = open(config["file1"])$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^line = f.readline()$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = line.strip()$/;"	v
current_line	projAML/WXS/mergePIDfreq.py	/^    current_line = line.split('\\t')$/;"	v
key	projAML/WXS/mergePIDfreq.py	/^    key =current_line[0]+','+current_line[1]$/;"	v
key_val	projAML/WXS/mergePIDfreq.py	/^    key_val =current_line[0]+current_line[1]$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = f.readline()$/;"	v
f	projAML/WXS/mergePIDfreq.py	/^f = open(config["file2"])$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^line = f.readline()$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = line.strip()$/;"	v
current_line	projAML/WXS/mergePIDfreq.py	/^    current_line = line.split('\\t')$/;"	v
key	projAML/WXS/mergePIDfreq.py	/^    key =current_line[0]+','+current_line[1]$/;"	v
key_val	projAML/WXS/mergePIDfreq.py	/^    key_val =current_line[0]+current_line[1]$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = f.readline()$/;"	v
f	projAML/WXS/mergePIDfreq.py	/^f = open(config["file3"])$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^line = f.readline()$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = line.strip()$/;"	v
current_line	projAML/WXS/mergePIDfreq.py	/^    current_line = line.split('\\t')$/;"	v
key	projAML/WXS/mergePIDfreq.py	/^    key =current_line[0]+','+current_line[1]$/;"	v
key_val	projAML/WXS/mergePIDfreq.py	/^    key_val =current_line[0]+current_line[1]$/;"	v
line	projAML/WXS/mergePIDfreq.py	/^    line = f.readline()$/;"	v
sort	projAML/WXS/mergePIDfreq.py	/^sort = sorted(dict_key.keys())$/;"	v
f	projAML/WXS/mergePIDfreq.py	/^f = open(config["file4"], 'w')$/;"	v
key_s	projAML/WXS/mergePIDfreq.py	/^    key_s = dict_key[key_val].strip()$/;"	v
key_array	projAML/WXS/mergePIDfreq.py	/^    key_array = key_s.split(',')$/;"	v
os	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import os$/;"	i
glob	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import glob$/;"	i
sys	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import sys$/;"	i
re	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import re$/;"	i
getopt	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import getopt$/;"	i
string	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^import string$/;"	i
argv	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^argv = sys.argv[1:]$/;"	v
inpd	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    inpd      = arg$/;"	v
inptype	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    inptype   = arg$/;"	v
outp	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    outp      = arg								$/;"	v
fnames	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^fnames = ([file for root, dirs, files in os.walk(inpd)$/;"	v
outp	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^outp  = os.getcwd() + "\/" + outp$/;"	v
chrPosAll	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    chrPosAll = []$/;"	v
chr_pos	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                chr_pos = line.strip().split("\\t")$/;"	v
chrPosAll	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                chrPosAll = list(set(chrPosAll + chr_pos))$/;"	v
numField	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    numField   = len(chrPosAll)$/;"	v
outputSort	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^    outputSort = open(outp + '.sort','w')$/;"	v
lineTemp	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                lineTemp = line.strip().split("\\t")$/;"	v
nonZeroChrPosTemp	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                nonZeroChrPosTemp = []$/;"	v
info	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                info = ['NA'] * numField$/;"	v
lineTemp	projAML/WXS/genSomatciMutationForAllPatients_v2.py	/^                lineTemp = line.strip().split("\\t")$/;"	v
os	projAML/WXS/do_final_filter.py	/^import os$/;"	i
sys	projAML/WXS/do_final_filter.py	/^import sys,getopt$/;"	i
getopt	projAML/WXS/do_final_filter.py	/^import sys,getopt$/;"	i
re	projAML/WXS/do_final_filter.py	/^import re$/;"	i
collections	projAML/WXS/do_final_filter.py	/^import collections$/;"	i
argv	projAML/WXS/do_final_filter.py	/^argv = sys.argv[1:]$/;"	v
inp	projAML/WXS/do_final_filter.py	/^            inp = arg$/;"	v
fpgenefile	projAML/WXS/do_final_filter.py	/^            fpgenefile = arg$/;"	v
out	projAML/WXS/do_final_filter.py	/^            out = arg$/;"	v
gtnorm_cut	projAML/WXS/do_final_filter.py	/^gtnorm_cut = '0\/0'$/;"	v
pltum_cut	projAML/WXS/do_final_filter.py	/^pltum_cut = 40$/;"	v
plnorm_cut	projAML/WXS/do_final_filter.py	/^plnorm_cut = 30$/;"	v
clr_cut	projAML/WXS/do_final_filter.py	/^clr_cut = 1$/;"	v
dp3_cut	projAML/WXS/do_final_filter.py	/^dp3_cut = 1$/;"	v
dp4_cut	projAML/WXS/do_final_filter.py	/^dp4_cut = 1$/;"	v
dp34_cut	projAML/WXS/do_final_filter.py	/^dp34_cut = 3$/;"	v
dp_cut	projAML/WXS/do_final_filter.py	/^dp_cut = 10$/;"	v
mq0_cut	projAML/WXS/do_final_filter.py	/^mq0_cut =  0.1$/;"	v
dpnorm_cut	projAML/WXS/do_final_filter.py	/^dpnorm_cut = 1$/;"	v
mafnorm_cut	projAML/WXS/do_final_filter.py	/^mafnorm_cut = 0.05$/;"	v
maftum_cut	projAML/WXS/do_final_filter.py	/^maftum_cut = 0$/;"	v
snv_type	projAML/WXS/do_final_filter.py	/^snv_type = 'GERMLINE'$/;"	v
funcClass_type	projAML/WXS/do_final_filter.py	/^funcClass_type = 'synonymousSNV'$/;"	v
fpgeneArray	projAML/WXS/do_final_filter.py	/^fpgeneArray = []$/;"	v
outf	projAML/WXS/do_final_filter.py	/^outf = open(out,'w')$/;"	v
flag_header	projAML/WXS/do_final_filter.py	/^flag_header = 1 $/;"	v
cnt_line	projAML/WXS/do_final_filter.py	/^cnt_line = 0 $/;"	v
cnt_res	projAML/WXS/do_final_filter.py	/^cnt_res = 0$/;"	v
tempHeader	projAML/WXS/do_final_filter.py	/^                  tempHeader = line.strip().split("\\t")$/;"	v
sample1Name	projAML/WXS/do_final_filter.py	/^                  sample1Name = tempHeader[-2]$/;"	v
sample2Name	projAML/WXS/do_final_filter.py	/^                  sample2Name = tempHeader[-1]$/;"	v
cnt_line	projAML/WXS/do_final_filter.py	/^                  cnt_line = cnt_line + 1$/;"	v
infoArray	projAML/WXS/do_final_filter.py	/^                        infoArray = info.split(";")$/;"	v
infoDict	projAML/WXS/do_final_filter.py	/^                        infoDict = {}$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                        flag=1$/;"	v
temp	projAML/WXS/do_final_filter.py	/^                             temp = infosub.split("=")$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
formatArray	projAML/WXS/do_final_filter.py	/^                        formatArray = format.split(":")$/;"	v
sample1Array	projAML/WXS/do_final_filter.py	/^                        sample1Array = sample1.split(":")$/;"	v
sample2Array	projAML/WXS/do_final_filter.py	/^                        sample2Array = sample2.split(":")$/;"	v
idxAD	projAML/WXS/do_final_filter.py	/^                             idxAD = formatArray.index('AD')$/;"	v
s1temp	projAML/WXS/do_final_filter.py	/^                             s1temp = sample1Array[idxAD].split(",")$/;"	v
s2temp	projAML/WXS/do_final_filter.py	/^                             s2temp = sample2Array[idxAD].split(",")$/;"	v
sample1Ref	projAML/WXS/do_final_filter.py	/^                               sample1Ref = '-'$/;"	v
sample1Alt	projAML/WXS/do_final_filter.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projAML/WXS/do_final_filter.py	/^                               sample2Ref = '-'$/;"	v
sample2Alt	projAML/WXS/do_final_filter.py	/^                               sample2Alt = '-'$/;"	v
sample1Ref	projAML/WXS/do_final_filter.py	/^                               sample1Ref = sample1Array[idxAD].split(",")[0]$/;"	v
sample1Alt	projAML/WXS/do_final_filter.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projAML/WXS/do_final_filter.py	/^                               sample2Ref = sample2Array[idxAD].split(",")[0]$/;"	v
sample2Alt	projAML/WXS/do_final_filter.py	/^                               sample2Alt = '-'$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0 $/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0 $/;"	v
mafnorm	projAML/WXS/do_final_filter.py	/^                             mafnorm = int(sample2Alt) \/ int(sample2Ref) $/;"	v
flag	projAML/WXS/do_final_filter.py	/^                                    flag = 0 $/;"	v
sample1PL_homoRef	projAML/WXS/do_final_filter.py	/^                        sample1PL_homoRef = sample1Array[formatArray.index('PL')].split(",")[0]  $/;"	v
sample2PL_hete	projAML/WXS/do_final_filter.py	/^                        sample2PL_hete = sample2Array[formatArray.index('PL')].split(",")[1]  $/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/do_final_filter.py	/^                             flag = 0 $/;"	v
flag_header	projAML/WXS/do_final_filter.py	/^                             flag_header = 0$/;"	v
cnt_res	projAML/WXS/do_final_filter.py	/^                              cnt_res = cnt_res + 1$/;"	v
os	projAML/WXS/doFinalFilterGermline.py	/^import os$/;"	i
sys	projAML/WXS/doFinalFilterGermline.py	/^import sys,getopt$/;"	i
getopt	projAML/WXS/doFinalFilterGermline.py	/^import sys,getopt$/;"	i
re	projAML/WXS/doFinalFilterGermline.py	/^import re$/;"	i
collections	projAML/WXS/doFinalFilterGermline.py	/^import collections$/;"	i
argv	projAML/WXS/doFinalFilterGermline.py	/^argv = sys.argv[1:]$/;"	v
inp	projAML/WXS/doFinalFilterGermline.py	/^            inp = arg$/;"	v
fpgenefile	projAML/WXS/doFinalFilterGermline.py	/^            fpgenefile = arg$/;"	v
out	projAML/WXS/doFinalFilterGermline.py	/^            out = arg$/;"	v
gtnorm_cut	projAML/WXS/doFinalFilterGermline.py	/^gtnorm_cut = '0\/0'$/;"	v
pltum_cut	projAML/WXS/doFinalFilterGermline.py	/^pltum_cut = 40$/;"	v
plnorm_cut	projAML/WXS/doFinalFilterGermline.py	/^plnorm_cut = 30$/;"	v
clr_cut	projAML/WXS/doFinalFilterGermline.py	/^clr_cut = 1$/;"	v
dp3_cut	projAML/WXS/doFinalFilterGermline.py	/^dp3_cut = 1$/;"	v
dp4_cut	projAML/WXS/doFinalFilterGermline.py	/^dp4_cut = 1$/;"	v
dp34_cut	projAML/WXS/doFinalFilterGermline.py	/^dp34_cut = 3$/;"	v
dp_cut	projAML/WXS/doFinalFilterGermline.py	/^dp_cut = 10$/;"	v
mq0_cut	projAML/WXS/doFinalFilterGermline.py	/^mq0_cut =  0.1$/;"	v
dpnorm_cut	projAML/WXS/doFinalFilterGermline.py	/^dpnorm_cut = 1$/;"	v
mafnorm_cut	projAML/WXS/doFinalFilterGermline.py	/^mafnorm_cut = 0.05$/;"	v
maftum_cut	projAML/WXS/doFinalFilterGermline.py	/^maftum_cut = 0$/;"	v
snv_type	projAML/WXS/doFinalFilterGermline.py	/^snv_type = 'GERMLINE'$/;"	v
funcClass_type	projAML/WXS/doFinalFilterGermline.py	/^funcClass_type = 'synonymousSNV'$/;"	v
fpgeneArray	projAML/WXS/doFinalFilterGermline.py	/^fpgeneArray = []$/;"	v
outf	projAML/WXS/doFinalFilterGermline.py	/^outf = open(out,'w')$/;"	v
flag_header	projAML/WXS/doFinalFilterGermline.py	/^flag_header = 1 $/;"	v
cnt_line	projAML/WXS/doFinalFilterGermline.py	/^cnt_line = 0 $/;"	v
cnt_res	projAML/WXS/doFinalFilterGermline.py	/^cnt_res = 0$/;"	v
tempHeader	projAML/WXS/doFinalFilterGermline.py	/^                  tempHeader = line.strip().split("\\t")$/;"	v
sample1Name	projAML/WXS/doFinalFilterGermline.py	/^                  sample1Name = tempHeader[-2]$/;"	v
sample2Name	projAML/WXS/doFinalFilterGermline.py	/^                  sample2Name = tempHeader[-1]$/;"	v
cnt_line	projAML/WXS/doFinalFilterGermline.py	/^                  cnt_line = cnt_line + 1$/;"	v
infoArray	projAML/WXS/doFinalFilterGermline.py	/^                        infoArray = info.split(";")$/;"	v
infoDict	projAML/WXS/doFinalFilterGermline.py	/^                        infoDict = {}$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                        flag=1$/;"	v
temp	projAML/WXS/doFinalFilterGermline.py	/^                             temp = infosub.split("=")$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
formatArray	projAML/WXS/doFinalFilterGermline.py	/^                        formatArray = format.split(":")$/;"	v
sample1Array	projAML/WXS/doFinalFilterGermline.py	/^                        sample1Array = sample1.split(":")$/;"	v
sample2Array	projAML/WXS/doFinalFilterGermline.py	/^                        sample2Array = sample2.split(":")$/;"	v
idxAD	projAML/WXS/doFinalFilterGermline.py	/^                             idxAD = formatArray.index('AD')$/;"	v
s1temp	projAML/WXS/doFinalFilterGermline.py	/^                             s1temp = sample1Array[idxAD].split(",")$/;"	v
s2temp	projAML/WXS/doFinalFilterGermline.py	/^                             s2temp = sample2Array[idxAD].split(",")$/;"	v
sample1Ref	projAML/WXS/doFinalFilterGermline.py	/^                               sample1Ref = '-'$/;"	v
sample1Alt	projAML/WXS/doFinalFilterGermline.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projAML/WXS/doFinalFilterGermline.py	/^                               sample2Ref = '-'$/;"	v
sample2Alt	projAML/WXS/doFinalFilterGermline.py	/^                               sample2Alt = '-'$/;"	v
sample1Ref	projAML/WXS/doFinalFilterGermline.py	/^                               sample1Ref = sample1Array[idxAD].split(",")[0]$/;"	v
sample1Alt	projAML/WXS/doFinalFilterGermline.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projAML/WXS/doFinalFilterGermline.py	/^                               sample2Ref = sample2Array[idxAD].split(",")[0]$/;"	v
sample2Alt	projAML/WXS/doFinalFilterGermline.py	/^                               sample2Alt = '-'$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0 $/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0 $/;"	v
mafnorm	projAML/WXS/doFinalFilterGermline.py	/^                             mafnorm = int(sample2Alt) \/ int(sample2Ref) $/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                                    flag = 0 $/;"	v
sample1PL_homoRef	projAML/WXS/doFinalFilterGermline.py	/^                        sample1PL_homoRef = sample1Array[formatArray.index('PL')].split(",")[0]  $/;"	v
sample2PL_hete	projAML/WXS/doFinalFilterGermline.py	/^                        sample2PL_hete = sample2Array[formatArray.index('PL')].split(",")[1]  $/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0$/;"	v
flag	projAML/WXS/doFinalFilterGermline.py	/^                             flag = 0 $/;"	v
flag_header	projAML/WXS/doFinalFilterGermline.py	/^                             flag_header = 0$/;"	v
cnt_res	projAML/WXS/doFinalFilterGermline.py	/^                              cnt_res = cnt_res + 1$/;"	v
os	projAML/WXS/fisherTestSNP.py	/^import os$/;"	i
math	projAML/WXS/fisherTestSNP.py	/^import math$/;"	i
linecache	projAML/WXS/fisherTestSNP.py	/^import linecache$/;"	i
stats	projAML/WXS/fisherTestSNP.py	/^from scipy import stats$/;"	i
inp	projAML/WXS/fisherTestSNP.py	/^inp = "ALL.NoAlt_0.txt"$/;"	v
outp	projAML/WXS/fisherTestSNP.py	/^outp = "ALL.NoAlt_0_fisher_exact.txt"$/;"	v
fisherExactTest	projAML/WXS/fisherTestSNP.py	/^def fisherExactTest(freqlist):$/;"	f
fout	projAML/WXS/fisherTestSNP.py	/^fout = open(outp,'w')$/;"	v
os	projFocus/ceRNA/annot_SNP.py	/^import os$/;"	i
sys	projFocus/ceRNA/annot_SNP.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/annot_SNP.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/annot_SNP.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/annot_SNP.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/annot_SNP.py	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/annot_SNP.py	/^outp = ''$/;"	v
usage	projFocus/ceRNA/annot_SNP.py	/^usage = 'python annotSNP_v2.py -i <inputfile> -d <snp annotation file> -o <output file name>' $/;"	v
inp1	projFocus/ceRNA/annot_SNP.py	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/annot_SNP.py	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/annot_SNP.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/annot_SNP.py	/^    outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/annot_SNP.py	/^outlogf = open(outlog,"w")$/;"	v
outpf	projFocus/ceRNA/annot_SNP.py	/^outpf = open(outp,"w")$/;"	v
inp1Dict	projFocus/ceRNA/annot_SNP.py	/^inp1Dict = {}$/;"	v
outHeader1	projFocus/ceRNA/annot_SNP.py	/^      outHeader1 = line.split("\\t",1)[1]$/;"	v
cnt_out	projFocus/ceRNA/annot_SNP.py	/^cnt_out = 0$/;"	v
outKey	projFocus/ceRNA/annot_SNP.py	/^outKey = []$/;"	v
outHeader2	projFocus/ceRNA/annot_SNP.py	/^      outHeader2 = line.strip()$/;"	v
cnt_out	projFocus/ceRNA/annot_SNP.py	/^	cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^import os$/;"	i
linecache	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^import linecache$/;"	i
sys	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^inp = ''$/;"	v
outp	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^outp = ''$/;"	v
inp	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^     inp = arg$/;"	v
outp	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^     outp = arg$/;"	v
outlog	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^     outlog = outp + ".log"$/;"	v
sysTime	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^def sysTime(fdlog):$/;"	f
file_len	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^def file_len(fname):$/;"	f
cntCol	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^cntCol = file_len(inp)$/;"	v
fout	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^  allsamples = [" "] * (cntCol + 1)$/;"	v
line_crt	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^a=[open(i,'r',81920) for i in farray]$/;"	v
expt	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^	expt=[0] * cntCol$/;"	v
line	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^			ncol = ncol + 1$/;"	v
keynew	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^			keynew = key.split("|")[1]$/;"	v
fout2	projFocus/ceRNA/makeMatRnaseql3.py.bak	/^fout2 = open(outlog,'w')$/;"	v
printSysTime	projFocus/ceRNA/indelCall_v2.sh	/^printSysTime() {$/;"	f
os	projFocus/ceRNA/extractSNPmat.py	/^import os,sys,getopt$/;"	i
sys	projFocus/ceRNA/extractSNPmat.py	/^import os,sys,getopt$/;"	i
getopt	projFocus/ceRNA/extractSNPmat.py	/^import os,sys,getopt$/;"	i
argv	projFocus/ceRNA/extractSNPmat.py	/^argv = sys.argv[1:]$/;"	v
inputID	projFocus/ceRNA/extractSNPmat.py	/^inputID  = ''$/;"	v
inputMat	projFocus/ceRNA/extractSNPmat.py	/^inputMat = ''$/;"	v
output	projFocus/ceRNA/extractSNPmat.py	/^output   = ''$/;"	v
usage	projFocus/ceRNA/extractSNPmat.py	/^usage = '~\/tools\/python\/Python_current\/python \/ifs\/home\/c2b2\/ac_lab\/jh3283\/scripts\/projFocus\/ceRNA\/extractSNPmat.py -i ~\/SCRATCH\/projFocus\/ceRNA\/knowledgeBase\/GWAS_catalog_brca_SNPid.txt -m ..\/brca_snp_tumor_731.mat.anno -o brca_snp_tumor_731_GWASCatalogSNP.mat.anno'$/;"	v
example	projFocus/ceRNA/extractSNPmat.py	/^example = 'python \/ifs\/home\/c2b2\/ac_lab\/jh3283\/scripts\/projFocus\/ceRNA\/extractSNPmat.py -i <input snpid> -m <input snp annoataed matrix> -o <output>'$/;"	v
inputID	projFocus/ceRNA/extractSNPmat.py	/^	  inputID = arg$/;"	v
inputMat	projFocus/ceRNA/extractSNPmat.py	/^          inputMat = arg$/;"	v
output	projFocus/ceRNA/extractSNPmat.py	/^          output = arg$/;"	v
snpid	projFocus/ceRNA/extractSNPmat.py	/^snpid = []$/;"	v
fhout	projFocus/ceRNA/extractSNPmat.py	/^fhout  = open(output,'w') $/;"	v
cntOut	projFocus/ceRNA/extractSNPmat.py	/^cntOut = 0 $/;"	v
cntOut	projFocus/ceRNA/extractSNPmat.py	/^	    cntOut = cntOut + 1$/;"	v
os	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import os$/;"	i
sys	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import math$/;"	i
re	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import re$/;"	i
stats	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^outp = ''$/;"	v
inp1	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^    outlog = outp + ".log"$/;"	v
cutoff	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^cutoff = 100000000$/;"	v
chroms	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^chroms = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^fdr_cut = 1e-8  $/;"	v
chrArrayExp	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^chrArrayExp = [{} for _ in range(24)]$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^				tempP = pos.split(":")$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					tempP = map(int,tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^						pos = min(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^						pos = max(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^				chrom = int(chrom)$/;"	v
isInRange	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^def kwTest(xlist,ylist):$/;"	f
outpf	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^outpf = open(outp,'w')$/;"	v
resultArray	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^resultArray = []$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^snpdataDict ={}$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^				pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^				chrom = int(chrom)$/;"	v
exp_data	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^							exp_data = chrArrayExp[chrom - 1][key][2]$/;"	v
snp_data	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^							snp_data = val$/;"	v
snpval	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^							snpval = map(int,snp_data.strip().split("\\t"))$/;"	v
e	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^							e = chrArrayExp[chrom - 1][key][2]$/;"	v
exp	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^							exp = map(float,re.compile("\\s+").split(e.strip()))$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest.py.bak	/^outpf = open(outp,'w')$/;"	v
os	projFocus/ceRNA/getSomMutMatrix.py	/^import os,sys$/;"	i
sys	projFocus/ceRNA/getSomMutMatrix.py	/^import os,sys$/;"	i
getopt	projFocus/ceRNA/getSomMutMatrix.py	/^import getopt$/;"	i
Set	projFocus/ceRNA/getSomMutMatrix.py	/^from sets import Set$/;"	i
argv	projFocus/ceRNA/getSomMutMatrix.py	/^argv = sys.argv[1:]$/;"	v
mafFile	projFocus/ceRNA/getSomMutMatrix.py	/^        mafFile = arg$/;"	v
sampleFile	projFocus/ceRNA/getSomMutMatrix.py	/^        sampleFile = arg$/;"	v
outFile	projFocus/ceRNA/getSomMutMatrix.py	/^        outFile = arg$/;"	v
gsCont	projFocus/ceRNA/getSomMutMatrix.py	/^def gsCont(gene,sample):$/;"	f
mutInfo	projFocus/ceRNA/getSomMutMatrix.py	/^mutInfo = Set()$/;"	v
cntLine	projFocus/ceRNA/getSomMutMatrix.py	/^cntLine = 0 $/;"	v
allGene	projFocus/ceRNA/getSomMutMatrix.py	/^allGene = Set()$/;"	v
sampleName	projFocus/ceRNA/getSomMutMatrix.py	/^sampleName = []$/;"	v
outFileHander	projFocus/ceRNA/getSomMutMatrix.py	/^outFileHander = open(outFile,'w')$/;"	v
cntGene	projFocus/ceRNA/getSomMutMatrix.py	/^cntGene = 0$/;"	v
cntGene	projFocus/ceRNA/getSomMutMatrix.py	/^    cntGene = cntGene + 1$/;"	v
geneMutTemp	projFocus/ceRNA/getSomMutMatrix.py	/^    geneMutTemp = [] * len(sampleName)$/;"	v
os	projFocus/ceRNA/compareFileRows.py	/^import os$/;"	i
sys	projFocus/ceRNA/compareFileRows.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/compareFileRows.py	/^import sys,getopt$/;"	i
argv	projFocus/ceRNA/compareFileRows.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/compareFileRows.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/compareFileRows.py	/^inp2 = ''$/;"	v
inp1	projFocus/ceRNA/compareFileRows.py	/^    inp1 = arg$/;"	v
outp	projFocus/ceRNA/compareFileRows.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/compareFileRows.py	/^    outlog = arg + ".log"$/;"	v
inp2	projFocus/ceRNA/compareFileRows.py	/^    inp2 = arg$/;"	v
outlogf	projFocus/ceRNA/compareFileRows.py	/^outlogf = open(outlog, 'w')$/;"	v
inp1Dict	projFocus/ceRNA/compareFileRows.py	/^inp1Dict = {}$/;"	v
outpf	projFocus/ceRNA/compareFileRows.py	/^outpf = open(outp,'w')$/;"	v
count	projFocus/ceRNA/compareFileRows.py	/^count = 0 $/;"	v
count	projFocus/ceRNA/compareFileRows.py	/^      count = count + 1$/;"	v
os	projFocus/ceRNA/makeMat_SNP.py	/^import os$/;"	i
math	projFocus/ceRNA/makeMat_SNP.py	/^import math$/;"	i
linecache	projFocus/ceRNA/makeMat_SNP.py	/^import linecache$/;"	i
sys	projFocus/ceRNA/makeMat_SNP.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/makeMat_SNP.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/makeMat_SNP.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/makeMat_SNP.py	/^inp = ''$/;"	v
outp	projFocus/ceRNA/makeMat_SNP.py	/^outp = ''$/;"	v
usage	projFocus/ceRNA/makeMat_SNP.py	/^usage = 'Usage:makeMat_SNP.py -i <input file:list of level2 snp file name.> -o <outputfile: output snp matrix file name>'$/;"	v
example	projFocus/ceRNA/makeMat_SNP.py	/^example = '~\/tools\/python\/Python_current\/python makMat_SNP.py -i \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/data\/snpArray\/input_makMat_SNP_tumorComm.txt -o \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/data\/snpArray\/brca_snp_tumor_731.mat' $/;"	v
inp	projFocus/ceRNA/makeMat_SNP.py	/^    inp = arg$/;"	v
outp	projFocus/ceRNA/makeMat_SNP.py	/^    outp = arg$/;"	v
outpstat	projFocus/ceRNA/makeMat_SNP.py	/^    outpstat = outp + "_stat"$/;"	v
conf_cut	projFocus/ceRNA/makeMat_SNP.py	/^conf_cut = 0.1 #confidence > 0.1$/;"	v
maf_cut	projFocus/ceRNA/makeMat_SNP.py	/^maf_cut = 0.05 #minor allele frequence maf > 5%$/;"	v
file_len	projFocus/ceRNA/makeMat_SNP.py	/^def file_len(fname):$/;"	f
sysTime	projFocus/ceRNA/makeMat_SNP.py	/^def sysTime():$/;"	f
get_nth_line	projFocus/ceRNA/makeMat_SNP.py	/^def get_nth_line(f,n):$/;"	f
get_MAF	projFocus/ceRNA/makeMat_SNP.py	/^def get_MAF(gtlist):$/;"	f
logfac	projFocus/ceRNA/makeMat_SNP.py	/^def logfac(n):$/;"	f
nsample	projFocus/ceRNA/makeMat_SNP.py	/^nsample = file_len(inp)$/;"	v
sampleSize_cut	projFocus/ceRNA/makeMat_SNP.py	/^sampleSize_cut = int(0.1 * nsample) $/;"	v
outp	projFocus/ceRNA/makeMat_SNP.py	/^outp = outp +"_" + str(nsample) + ".mat"$/;"	v
outpstat	projFocus/ceRNA/makeMat_SNP.py	/^outpstat = outpstat +"_" +  str(nsample) + ".txt"$/;"	v
cnt_f1	projFocus/ceRNA/makeMat_SNP.py	/^cnt_f1 = 0$/;"	v
cnt_f2	projFocus/ceRNA/makeMat_SNP.py	/^cnt_f2 = 0$/;"	v
fout	projFocus/ceRNA/makeMat_SNP.py	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/makeMat_SNP.py	/^  allsamples = [" "] * nsample$/;"	v
line_crt	projFocus/ceRNA/makeMat_SNP.py	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/makeMat_SNP.py	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/makeMat_SNP.py	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/makeMat_SNP.py	/^a=[open(i,'r',81920) for i in farray]$/;"	v
gt	projFocus/ceRNA/makeMat_SNP.py	/^	gt = [0] * nsample$/;"	v
conf	projFocus/ceRNA/makeMat_SNP.py	/^	conf = [0] * nsample$/;"	v
line	projFocus/ceRNA/makeMat_SNP.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMat_SNP.py	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/makeMat_SNP.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMat_SNP.py	/^			ncol = ncol + 1$/;"	v
samples	projFocus/ceRNA/makeMat_SNP.py	/^		samples=allsamples $/;"	v
allgt	projFocus/ceRNA/makeMat_SNP.py	/^		allgt = gt		$/;"	v
temp	projFocus/ceRNA/makeMat_SNP.py	/^		temp = [j for j in range(len(conf)) if(conf[j] < conf_cut)]$/;"	v
maf	projFocus/ceRNA/makeMat_SNP.py	/^		   	maf = get_MAF(gt)$/;"	v
cnt_f2	projFocus/ceRNA/makeMat_SNP.py	/^				cnt_f2 = cnt_f2 + 1$/;"	v
cnt_f1	projFocus/ceRNA/makeMat_SNP.py	/^			cnt_f1 = cnt_f1 + 1$/;"	v
fout2	projFocus/ceRNA/makeMat_SNP.py	/^fout2 = open(outpstat,'w')$/;"	v
os	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^import os,sys$/;"	i
sys	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^import os,sys$/;"	i
getopt	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^import getopt$/;"	i
usage	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^usage = "python convertEntrezAnno2GeneAnnot.py -i <> -o <out.mat> -m <selected_sample_TCGA_barcode.txt> -o <?>"$/;"	v
argv	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^argv = sys.argv[1:]$/;"	v
mapFile	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^mapFile = ""$/;"	v
inpFile	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^    inpFile = arg$/;"	v
mapFile	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^    mapFile = arg$/;"	v
outFile	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^    outFile = arg$/;"	v
mapFile	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^  mapFile ="\/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/database\/geneIDconverter\/entrez2gene.txt"$/;"	v
mapDict	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^mapDict = {}$/;"	v
skipHeader	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^skipHeader = "TRUE"$/;"	v
outFileHandler	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^outFileHandler = open(outFile,'w')$/;"	v
cntUnmapped	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^cntUnmapped = 0$/;"	v
skipHeader	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^      skipHeader = "FALSE"$/;"	v
cntUnmapped	projFocus/ceRNA/convertEntrezAnno2GeneAnno.py	/^	cntUnmapped = cntUnmapped + 1$/;"	v
os	projFocus/ceRNA/annot_SNP.py.bak	/^import os$/;"	i
sys	projFocus/ceRNA/annot_SNP.py.bak	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/annot_SNP.py.bak	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/annot_SNP.py.bak	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/annot_SNP.py.bak	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/annot_SNP.py.bak	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/annot_SNP.py.bak	/^outp = ''$/;"	v
inp1	projFocus/ceRNA/annot_SNP.py.bak	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/annot_SNP.py.bak	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/annot_SNP.py.bak	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/annot_SNP.py.bak	/^    outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/annot_SNP.py.bak	/^outlogf = open(outlog,"w")$/;"	v
outpf	projFocus/ceRNA/annot_SNP.py.bak	/^outpf = open(outp,"w")$/;"	v
inp1Dict	projFocus/ceRNA/annot_SNP.py.bak	/^inp1Dict = {}$/;"	v
outHeader1	projFocus/ceRNA/annot_SNP.py.bak	/^      outHeader1 = line.split("\\t",1)[1]$/;"	v
outHeader2	projFocus/ceRNA/annot_SNP.py.bak	/^      outHeader2 = line.strip()$/;"	v
os	projFocus/ceRNA/filterSNP_noHWE.py	/^import os$/;"	i
math	projFocus/ceRNA/filterSNP_noHWE.py	/^import math$/;"	i
inp	projFocus/ceRNA/filterSNP_noHWE.py	/^inp = "input_filter_GT_top400.txt"$/;"	v
outp	projFocus/ceRNA/filterSNP_noHWE.py	/^outp = "out_filter_GT"$/;"	v
outpstat	projFocus/ceRNA/filterSNP_noHWE.py	/^outpstat = "out_filter_GT_stat"$/;"	v
conf_cut	projFocus/ceRNA/filterSNP_noHWE.py	/^conf_cut = 0.01$/;"	v
maf_cut	projFocus/ceRNA/filterSNP_noHWE.py	/^maf_cut = 0.05$/;"	v
sampleSize_cut	projFocus/ceRNA/filterSNP_noHWE.py	/^sampleSize_cut = 30 # in real$/;"	v
file_len	projFocus/ceRNA/filterSNP_noHWE.py	/^def file_len(fname):$/;"	f
get_nth_line	projFocus/ceRNA/filterSNP_noHWE.py	/^def get_nth_line(f,n):$/;"	f
nsample	projFocus/ceRNA/filterSNP_noHWE.py	/^nsample = file_len(inp)$/;"	v
line_crt	projFocus/ceRNA/filterSNP_noHWE.py	/^				line_crt = line.strip()$/;"	v
nsnp	projFocus/ceRNA/filterSNP_noHWE.py	/^				nsnp = file_len(line_crt)$/;"	v
outp	projFocus/ceRNA/filterSNP_noHWE.py	/^outp = outp + str(nsample) + ".txt"$/;"	v
outpstat	projFocus/ceRNA/filterSNP_noHWE.py	/^outpstat = outpstat + str(nsample) + ".txt"$/;"	v
get_MAF	projFocus/ceRNA/filterSNP_noHWE.py	/^def get_MAF(gtlist):$/;"	f
logfac	projFocus/ceRNA/filterSNP_noHWE.py	/^def logfac(n):$/;"	f
fisherTest	projFocus/ceRNA/filterSNP_noHWE.py	/^def fisherTest(gtlist):$/;"	f
cnt_f1	projFocus/ceRNA/filterSNP_noHWE.py	/^cnt_f1 = 0$/;"	v
cnt_f2	projFocus/ceRNA/filterSNP_noHWE.py	/^cnt_f2 = 0$/;"	v
cnt_f3	projFocus/ceRNA/filterSNP_noHWE.py	/^cnt_f3 = 0$/;"	v
fout	projFocus/ceRNA/filterSNP_noHWE.py	/^fout = open(outp,'w')$/;"	v
time1	projFocus/ceRNA/filterSNP_noHWE.py	/^time1=os.system("date|awk '{print $4}'")$/;"	v
allsamples	projFocus/ceRNA/filterSNP_noHWE.py	/^  allsamples = [" "] * nsample$/;"	v
line_crt	projFocus/ceRNA/filterSNP_noHWE.py	/^	line_crt = line.strip()$/;"	v
time2	projFocus/ceRNA/filterSNP_noHWE.py	/^time2=os.system("date|awk '{print $4}'")$/;"	v
gt	projFocus/ceRNA/filterSNP_noHWE.py	/^	gt = [0] * nsample$/;"	v
conf	projFocus/ceRNA/filterSNP_noHWE.py	/^	conf = [0] * nsample$/;"	v
time3	projFocus/ceRNA/filterSNP_noHWE.py	/^	time3=os.system("date|awk '{print $4}'")$/;"	v
line_crt	projFocus/ceRNA/filterSNP_noHWE.py	/^			line_crt = line.strip()$/;"	v
samples	projFocus/ceRNA/filterSNP_noHWE.py	/^	samples=allsamples $/;"	v
allgt	projFocus/ceRNA/filterSNP_noHWE.py	/^	allgt = gt		$/;"	v
a	projFocus/ceRNA/filterSNP_noHWE.py	/^	a = [j for j in range(len(conf)) if(conf[j] < conf_cut)]$/;"	v
gt	projFocus/ceRNA/filterSNP_noHWE.py	/^		gt = [ gt[i] for i in a ]$/;"	v
samples	projFocus/ceRNA/filterSNP_noHWE.py	/^		samples = [ samples[i] for i in a ]$/;"	v
maf	projFocus/ceRNA/filterSNP_noHWE.py	/^	   	maf = get_MAF(gt)$/;"	v
a	projFocus/ceRNA/filterSNP_noHWE.py	/^			a = [j for j in range(len(allsamples)) if allsamples[j] not in samples]$/;"	v
cnt_f2	projFocus/ceRNA/filterSNP_noHWE.py	/^			cnt_f2 = cnt_f2 + 1$/;"	v
cnt_f1	projFocus/ceRNA/filterSNP_noHWE.py	/^		cnt_f1 = cnt_f1 + 1$/;"	v
fout2	projFocus/ceRNA/filterSNP_noHWE.py	/^fout2 = open(outpstat,'w')$/;"	v
os	projFocus/ceRNA/filterSNP.py	/^import os$/;"	i
math	projFocus/ceRNA/filterSNP.py	/^import math$/;"	i
linecache	projFocus/ceRNA/filterSNP.py	/^import linecache$/;"	i
inp	projFocus/ceRNA/filterSNP.py	/^inp = "input_filter_GT_bottom436.txt"$/;"	v
outp	projFocus/ceRNA/filterSNP.py	/^outp = "out_filter_GT"$/;"	v
outpstat	projFocus/ceRNA/filterSNP.py	/^outpstat = "out_filter_GT_stat"$/;"	v
conf_cut	projFocus/ceRNA/filterSNP.py	/^conf_cut = 0.01$/;"	v
maf_cut	projFocus/ceRNA/filterSNP.py	/^maf_cut = 0.05$/;"	v
fisher_cut	projFocus/ceRNA/filterSNP.py	/^fisher_cut =  0.001$/;"	v
sampleSize_cut	projFocus/ceRNA/filterSNP.py	/^sampleSize_cut = 30 # in real$/;"	v
file_len	projFocus/ceRNA/filterSNP.py	/^def file_len(fname):$/;"	f
sysTime	projFocus/ceRNA/filterSNP.py	/^def sysTime():$/;"	f
get_nth_line	projFocus/ceRNA/filterSNP.py	/^def get_nth_line(f,n):$/;"	f
nsample	projFocus/ceRNA/filterSNP.py	/^nsample = file_len(inp)$/;"	v
line_crt	projFocus/ceRNA/filterSNP.py	/^				line_crt = line.strip()$/;"	v
nsnp	projFocus/ceRNA/filterSNP.py	/^				nsnp = file_len(line_crt)$/;"	v
outp	projFocus/ceRNA/filterSNP.py	/^outp = outp + str(nsample) + ".txt"$/;"	v
outpstat	projFocus/ceRNA/filterSNP.py	/^outpstat = outpstat + str(nsample) + ".txt"$/;"	v
get_MAF	projFocus/ceRNA/filterSNP.py	/^def get_MAF(gtlist):$/;"	f
logfac	projFocus/ceRNA/filterSNP.py	/^def logfac(n):$/;"	f
fisherTest	projFocus/ceRNA/filterSNP.py	/^def fisherTest(gtlist):$/;"	f
cnt_f1	projFocus/ceRNA/filterSNP.py	/^cnt_f1 = 0$/;"	v
cnt_f2	projFocus/ceRNA/filterSNP.py	/^cnt_f2 = 0$/;"	v
cnt_f3	projFocus/ceRNA/filterSNP.py	/^cnt_f3 = 0$/;"	v
fout	projFocus/ceRNA/filterSNP.py	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/filterSNP.py	/^  allsamples = [" "] * nsample$/;"	v
line_crt	projFocus/ceRNA/filterSNP.py	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/filterSNP.py	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/filterSNP.py	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/filterSNP.py	/^a=[open(i,'r',81920) for i in farray]$/;"	v
gt	projFocus/ceRNA/filterSNP.py	/^	gt = [0] * nsample$/;"	v
conf	projFocus/ceRNA/filterSNP.py	/^	conf = [0] * nsample$/;"	v
line	projFocus/ceRNA/filterSNP.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/filterSNP.py	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/filterSNP.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/filterSNP.py	/^			ncol = ncol + 1$/;"	v
samples	projFocus/ceRNA/filterSNP.py	/^		samples=allsamples $/;"	v
allgt	projFocus/ceRNA/filterSNP.py	/^		allgt = gt		$/;"	v
temp	projFocus/ceRNA/filterSNP.py	/^		temp = [j for j in range(len(conf)) if(conf[j] < conf_cut)]$/;"	v
gt	projFocus/ceRNA/filterSNP.py	/^			gt = [ gt[i] for i in temp ]$/;"	v
samples	projFocus/ceRNA/filterSNP.py	/^			samples = [ samples[i] for i in temp ]$/;"	v
maf	projFocus/ceRNA/filterSNP.py	/^		   	maf = get_MAF(gt)$/;"	v
ftest	projFocus/ceRNA/filterSNP.py	/^				ftest = fisherTest(gt)$/;"	v
temp2	projFocus/ceRNA/filterSNP.py	/^					temp2 = [j for j in range(len(allsamples)) if allsamples[j] not in samples]$/;"	v
cnt_f3	projFocus/ceRNA/filterSNP.py	/^					cnt_f3 = cnt_f3 + 1$/;"	v
cnt_f2	projFocus/ceRNA/filterSNP.py	/^				cnt_f2 = cnt_f2 + 1$/;"	v
cnt_f1	projFocus/ceRNA/filterSNP.py	/^			cnt_f1 = cnt_f1 + 1$/;"	v
fout2	projFocus/ceRNA/filterSNP.py	/^fout2 = open(outpstat,'w')$/;"	v
inpAnno	projFocus/ceRNA/annotGeneByStartEndPos.py	/^inpAnno="\/ifs\/scratch\/c2b2\/ac_lab\/rs3412\/no1\/net\/entrez_annotation_hg19.txt"$/;"	v
os	projFocus/ceRNA/annotSNP_v1.py	/^import os$/;"	i
sys	projFocus/ceRNA/annotSNP_v1.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/annotSNP_v1.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/annotSNP_v1.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/annotSNP_v1.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/annotSNP_v1.py	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/annotSNP_v1.py	/^outp = ''$/;"	v
inp1	projFocus/ceRNA/annotSNP_v1.py	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/annotSNP_v1.py	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/annotSNP_v1.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/annotSNP_v1.py	/^    outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/annotSNP_v1.py	/^outlogf = open(outlog,"w")$/;"	v
outpf	projFocus/ceRNA/annotSNP_v1.py	/^outpf = open(outp,"w")$/;"	v
inp1Dict	projFocus/ceRNA/annotSNP_v1.py	/^inp1Dict = {}$/;"	v
outHeader1	projFocus/ceRNA/annotSNP_v1.py	/^      outHeader1 = line.split("\\t",1)[1]$/;"	v
cnt_out	projFocus/ceRNA/annotSNP_v1.py	/^cnt_out = 0$/;"	v
outKey	projFocus/ceRNA/annotSNP_v1.py	/^outKey = []$/;"	v
outHeader2	projFocus/ceRNA/annotSNP_v1.py	/^      outHeader2 = line.strip()$/;"	v
cnt_out	projFocus/ceRNA/annotSNP_v1.py	/^	cnt_out = cnt_out + 1$/;"	v
Node	projFocus/ceRNA/test/bst/binary_tree.py	/^class Node:$/;"	c
__init__	projFocus/ceRNA/test/bst/binary_tree.py	/^    def __init__(self, data):$/;"	m	class:Node
insert	projFocus/ceRNA/test/bst/binary_tree.py	/^    def insert(self, data):$/;"	m	class:Node
lookup	projFocus/ceRNA/test/bst/binary_tree.py	/^    def lookup(self, data, parent=None):$/;"	m	class:Node
delete	projFocus/ceRNA/test/bst/binary_tree.py	/^    def delete(self, data):$/;"	m	class:Node
compare_trees	projFocus/ceRNA/test/bst/binary_tree.py	/^    def compare_trees(self, node):$/;"	m	class:Node
print_tree	projFocus/ceRNA/test/bst/binary_tree.py	/^    def print_tree(self):$/;"	m	class:Node
tree_data	projFocus/ceRNA/test/bst/binary_tree.py	/^    def tree_data(self):$/;"	m	class:Node
children_count	projFocus/ceRNA/test/bst/binary_tree.py	/^    def children_count(self):$/;"	m	class:Node
inRegion	projFocus/ceRNA/test/bst/binary_tree.py	/^    def inRegion(seg1,seg2):$/;"	m	class:Node
getNcol2Test	projFocus/ceRNA/test/README.sh	/^getNcol2Test() {$/;"	f
os	projFocus/ceRNA/test/compareFileCols.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/compareFileCols.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/test/compareFileCols.py	/^import sys,getopt$/;"	i
argv	projFocus/ceRNA/test/compareFileCols.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/test/compareFileCols.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/test/compareFileCols.py	/^inp2 = ''$/;"	v
inp1	projFocus/ceRNA/test/compareFileCols.py	/^    inp1 = arg$/;"	v
outp1	projFocus/ceRNA/test/compareFileCols.py	/^    outp1 = inp1 + ".comm"$/;"	v
inp2	projFocus/ceRNA/test/compareFileCols.py	/^    inp2 = arg$/;"	v
outp2	projFocus/ceRNA/test/compareFileCols.py	/^    outp2 = inp2 + ".comm"$/;"	v
colNames1	projFocus/ceRNA/test/compareFileCols.py	/^      colNames1 = line.strip().split("\\t")[4:]$/;"	v
colNames2	projFocus/ceRNA/test/compareFileCols.py	/^      colNames2 = line.strip().split("\\t")[4:]$/;"	v
mySubstr	projFocus/ceRNA/test/compareFileCols.py	/^def mySubstr(x):$/;"	f
colN1	projFocus/ceRNA/test/compareFileCols.py	/^colN1 = map(mySubstr,colNames1)$/;"	v
colN2	projFocus/ceRNA/test/compareFileCols.py	/^colN2 = map(mySubstr,colNames2)$/;"	v
comm	projFocus/ceRNA/test/compareFileCols.py	/^comm = list(set(colN1)&set(colN2))$/;"	v
idx_colN1	projFocus/ceRNA/test/compareFileCols.py	/^idx_colN1 = [0,1,2,3]$/;"	v
idx_colN2	projFocus/ceRNA/test/compareFileCols.py	/^idx_colN2 = [0,1,2,3]$/;"	v
outMyIdx	projFocus/ceRNA/test/compareFileCols.py	/^def outMyIdx(valArray,idxArray):$/;"	f
outMyIdxFile	projFocus/ceRNA/test/compareFileCols.py	/^def outMyIdxFile(filename,out,idx):$/;"	f
np	projFocus/ceRNA/test/logitReg.py	/^import numpy as np$/;"	i
sp	projFocus/ceRNA/test/logitReg.py	/^import scipy as sp$/;"	i
scipy	projFocus/ceRNA/test/logitReg.py	/^import scipy.optimize$/;"	i
optimize	projFocus/ceRNA/test/logitReg.py	/^import scipy.optimize$/;"	i
mpl	projFocus/ceRNA/test/logitReg.py	/^import matplotlib as mpl$/;"	i
os	projFocus/ceRNA/test/logitReg.py	/^import os$/;"	i
data	projFocus/ceRNA/test/logitReg.py	/^data = np.loadtxt('data.csv', delimiter=',', skiprows=1)$/;"	v
vY	projFocus/ceRNA/test/logitReg.py	/^vY = data[:, 0]$/;"	v
mX	projFocus/ceRNA/test/logitReg.py	/^mX = data[:, 1:]$/;"	v
intercept	projFocus/ceRNA/test/logitReg.py	/^intercept = np.ones(mX.shape[0]).reshape(mX.shape[0], 1)$/;"	v
mX	projFocus/ceRNA/test/logitReg.py	/^mX = np.concatenate((intercept, mX), axis = 1)$/;"	v
iK	projFocus/ceRNA/test/logitReg.py	/^iK = mX.shape[1]$/;"	v
iN	projFocus/ceRNA/test/logitReg.py	/^iN = mX.shape[0]$/;"	v
logit	projFocus/ceRNA/test/logitReg.py	/^def logit(mX, vBeta):$/;"	f
vBeta0	projFocus/ceRNA/test/logitReg.py	/^vBeta0 = np.array([-.10296645, -.0332327, -.01209484, .44626211, .92554137, .53973828, $/;"	v
logLikelihoodLogit	projFocus/ceRNA/test/logitReg.py	/^def logLikelihoodLogit(vBeta, mX, vY):$/;"	f
logLikelihoodLogitVerbose	projFocus/ceRNA/test/logitReg.py	/^def logLikelihoodLogitVerbose(vBeta, mX, vY):$/;"	f
likelihoodScore	projFocus/ceRNA/test/logitReg.py	/^def likelihoodScore(vBeta, mX, vY):$/;"	f
optimLogit	projFocus/ceRNA/test/logitReg.py	/^optimLogit = scipy.optimize.fmin_bfgs(logLikelihoodLogitVerbose, $/;"	v
optimLogit	projFocus/ceRNA/test/logitReg.py	/^optimLogit = scipy.optimize.fmin_bfgs(logLikelihoodLogitVerbose, $/;"	v
x0	projFocus/ceRNA/test/logitReg.py	/^                                  x0 = np.array([-.1, -.03, -.01, .44, .92, .53,$/;"	v
args	projFocus/ceRNA/test/logitReg.py	/^                                  args = (mX, vY), gtol = 1e-3)$/;"	v
os	projFocus/ceRNA/test/filterIndel.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/filterIndel.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/test/filterIndel.py	/^import sys,getopt$/;"	i
re	projFocus/ceRNA/test/filterIndel.py	/^import re$/;"	i
collections	projFocus/ceRNA/test/filterIndel.py	/^import collections$/;"	i
usage	projFocus/ceRNA/test/filterIndel.py	/^usage = "Usage: filterIndel.py -i <input.vcf> -o <out.vcf>$/;"	v
argv	projFocus/ceRNA/test/filterIndel.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/test/filterIndel.py	/^            inp = arg$/;"	v
out	projFocus/ceRNA/test/filterIndel.py	/^            out = arg$/;"	v
outlog	projFocus/ceRNA/test/filterIndel.py	/^            outlog = out + ".log"$/;"	v
pltum_cut	projFocus/ceRNA/test/filterIndel.py	/^pltum_cut = 40$/;"	v
dp3_cut	projFocus/ceRNA/test/filterIndel.py	/^dp3_cut = 1$/;"	v
dp4_cut	projFocus/ceRNA/test/filterIndel.py	/^dp4_cut = 1$/;"	v
dp34_cut	projFocus/ceRNA/test/filterIndel.py	/^dp34_cut = 3$/;"	v
dp_cut	projFocus/ceRNA/test/filterIndel.py	/^dp_cut = 10$/;"	v
snv_type	projFocus/ceRNA/test/filterIndel.py	/^snv_type = 'GERMLINE'$/;"	v
funcClass_type	projFocus/ceRNA/test/filterIndel.py	/^funcClass_type = 'synonymousSNV'$/;"	v
fpgeneArray	projFocus/ceRNA/test/filterIndel.py	/^fpgeneArray = []$/;"	v
outf	projFocus/ceRNA/test/filterIndel.py	/^outf = open(out,'w')$/;"	v
flag_header	projFocus/ceRNA/test/filterIndel.py	/^flag_header = 1 $/;"	v
cnt_line	projFocus/ceRNA/test/filterIndel.py	/^cnt_line = 0 $/;"	v
cnt_res	projFocus/ceRNA/test/filterIndel.py	/^cnt_res = 0$/;"	v
tempHeader	projFocus/ceRNA/test/filterIndel.py	/^                  tempHeader = line.strip().split("\\t")$/;"	v
sample1Name	projFocus/ceRNA/test/filterIndel.py	/^                  sample1Name = tempHeader[-2]$/;"	v
sample2Name	projFocus/ceRNA/test/filterIndel.py	/^                  sample2Name = tempHeader[-1]$/;"	v
cnt_line	projFocus/ceRNA/test/filterIndel.py	/^                  cnt_line = cnt_line + 1$/;"	v
infoArray	projFocus/ceRNA/test/filterIndel.py	/^                        infoArray = info.split(";")$/;"	v
infoDict	projFocus/ceRNA/test/filterIndel.py	/^                        infoDict = {}$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                        flag=1$/;"	v
temp	projFocus/ceRNA/test/filterIndel.py	/^                             temp = infosub.split("=")$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
formatArray	projFocus/ceRNA/test/filterIndel.py	/^                        formatArray = format.split(":")$/;"	v
sample1Array	projFocus/ceRNA/test/filterIndel.py	/^                        sample1Array = sample1.split(":")$/;"	v
sample2Array	projFocus/ceRNA/test/filterIndel.py	/^                        sample2Array = sample2.split(":")$/;"	v
idxAD	projFocus/ceRNA/test/filterIndel.py	/^                             idxAD = formatArray.index('AD')$/;"	v
s1temp	projFocus/ceRNA/test/filterIndel.py	/^                             s1temp = sample1Array[idxAD].split(",")$/;"	v
s2temp	projFocus/ceRNA/test/filterIndel.py	/^                             s2temp = sample2Array[idxAD].split(",")$/;"	v
sample1Ref	projFocus/ceRNA/test/filterIndel.py	/^                               sample1Ref = '-'$/;"	v
sample1Alt	projFocus/ceRNA/test/filterIndel.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projFocus/ceRNA/test/filterIndel.py	/^                               sample2Ref = '-'$/;"	v
sample2Alt	projFocus/ceRNA/test/filterIndel.py	/^                               sample2Alt = '-'$/;"	v
sample1Ref	projFocus/ceRNA/test/filterIndel.py	/^                               sample1Ref = sample1Array[idxAD].split(",")[0]$/;"	v
sample1Alt	projFocus/ceRNA/test/filterIndel.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projFocus/ceRNA/test/filterIndel.py	/^                               sample2Ref = sample2Array[idxAD].split(",")[0]$/;"	v
sample2Alt	projFocus/ceRNA/test/filterIndel.py	/^                               sample2Alt = '-'$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0 $/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0 $/;"	v
mafnorm	projFocus/ceRNA/test/filterIndel.py	/^                             mafnorm = int(sample2Alt) \/ int(sample2Ref) $/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                                    flag = 0 $/;"	v
sample1PL_homoRef	projFocus/ceRNA/test/filterIndel.py	/^                        sample1PL_homoRef = sample1Array[formatArray.index('PL')].split(",")[0]  $/;"	v
sample2PL_hete	projFocus/ceRNA/test/filterIndel.py	/^                        sample2PL_hete = sample2Array[formatArray.index('PL')].split(",")[1]  $/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/filterIndel.py	/^                             flag = 0 $/;"	v
flag_header	projFocus/ceRNA/test/filterIndel.py	/^                             flag_header = 0$/;"	v
cnt_res	projFocus/ceRNA/test/filterIndel.py	/^                              cnt_res = cnt_res + 1$/;"	v
os	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import math$/;"	i
re	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import re$/;"	i
stats	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^inps = ''$/;"	v
inpe	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^inpe = ''$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^fdr_cut	  = 1e-8  $/;"	v
outp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^outp = ''$/;"	v
inps	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^    inps = arg$/;"	v
inpe	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^    inpe = arg$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^    fdr_cut = arg$/;"	v
outp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^    outp = arg$/;"	v
cutoff	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^cutoff	  = 1000000$/;"	v
chroms	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrArrayExp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^chrArrayExp = [{} for _ in range(24)]$/;"	v
tempP	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^				tempP = pos.split(":")$/;"	v
tempP	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					tempP = map(int,tempP)$/;"	v
pos	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^						pos = min(tempP)$/;"	v
pos	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^						pos = max(tempP)$/;"	v
pos	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^				chrom = int(chrom)$/;"	v
isInRange	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^def pAdj(plist,type):$/;"	f
outpf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^outpf = open(outp,'w')$/;"	v
pvalArray	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^pvalArray = []$/;"	v
snpdataDict	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^snpdataDict = {}$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^cnt_out	    = 0 $/;"	v
header_snpSample	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^			header_snpSample = line.strip().split("\\t",4)[4]$/;"	v
pos	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^				pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^				chrom = int(chrom)$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^							cnt_out  = cnt_out + 1$/;"	v
exp_data	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^							exp_data      = chrArrayExp[chrom - 1][key][2]$/;"	v
snpval	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^							snpval	      = map(int,val.strip().split("\\t"))$/;"	v
exp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^							exp	      = map(float,re.compile("\\s+").split(exp_data.strip()))$/;"	v
genename	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^							genename      = chrArrayExp[chrom - 1][key][0]$/;"	v
outpf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut),'w')$/;"	v
p_old	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v2.1.py	/^    cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/test/linkSNP_EXP.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/linkSNP_EXP.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/test/linkSNP_EXP.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/test/linkSNP_EXP.py	/^import math$/;"	i
re	projFocus/ceRNA/test/linkSNP_EXP.py	/^import re$/;"	i
argv	projFocus/ceRNA/test/linkSNP_EXP.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/test/linkSNP_EXP.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/test/linkSNP_EXP.py	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/test/linkSNP_EXP.py	/^outp = ''$/;"	v
inp1	projFocus/ceRNA/test/linkSNP_EXP.py	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/test/linkSNP_EXP.py	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/test/linkSNP_EXP.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/test/linkSNP_EXP.py	/^    outlog = outp + ".log"$/;"	v
cutoff	projFocus/ceRNA/test/linkSNP_EXP.py	/^cutoff = 1000000$/;"	v
chroms	projFocus/ceRNA/test/linkSNP_EXP.py	/^chroms = range(1,23) + ['X','Y']$/;"	v
chrArrayExp	projFocus/ceRNA/test/linkSNP_EXP.py	/^chrArrayExp = [{}] * 24$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^				chrom = int(chrom)$/;"	v
tempP	projFocus/ceRNA/test/linkSNP_EXP.py	/^				tempP = pos.split(":")$/;"	v
tempP	projFocus/ceRNA/test/linkSNP_EXP.py	/^					tempP = map(int,tempP)$/;"	v
pos	projFocus/ceRNA/test/linkSNP_EXP.py	/^						pos = min(tempP)$/;"	v
pos	projFocus/ceRNA/test/linkSNP_EXP.py	/^						pos = max(tempP)$/;"	v
pos	projFocus/ceRNA/test/linkSNP_EXP.py	/^					pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^					chrom = 24$/;"	v
isInRange	projFocus/ceRNA/test/linkSNP_EXP.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/test/linkSNP_EXP.py	/^def rUTest(x,y):$/;"	f
outpf	projFocus/ceRNA/test/linkSNP_EXP.py	/^outpf = open(outp,'w')$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^				chrom = int(chrom)$/;"	v
pos	projFocus/ceRNA/test/linkSNP_EXP.py	/^				pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/test/linkSNP_EXP.py	/^					chrom = 24$/;"	v
exp_data	projFocus/ceRNA/test/linkSNP_EXP.py	/^							exp_data = chrArrayExp[chrom - 1][key][2]$/;"	v
snp_data	projFocus/ceRNA/test/linkSNP_EXP.py	/^							snp_data = val$/;"	v
tempval	projFocus/ceRNA/test/linkSNP_EXP.py	/^							tempval = map(int,snp_data.strip().split("\\t"))$/;"	v
tempLen	projFocus/ceRNA/test/linkSNP_EXP.py	/^							tempLen = [ i for i in range(len(tempval)) if(tempval[i] >=0)]$/;"	v
es	projFocus/ceRNA/test/linkSNP_EXP.py	/^							es = len(tempLen)$/;"	v
g	projFocus/ceRNA/test/linkSNP_EXP.py	/^							g = chrArrayExp[chrom - 1][key][2]$/;"	v
gene	projFocus/ceRNA/test/linkSNP_EXP.py	/^							gene = map(int,re.compile("\\s+").split(g.strip()))$/;"	v
gene_es	projFocus/ceRNA/test/linkSNP_EXP.py	/^							gene_es = [gene[i] for i in tempLen]$/;"	v
val_es	projFocus/ceRNA/test/linkSNP_EXP.py	/^							val_es = [tempval[i] for i in tempLen]$/;"	v
os	projFocus/ceRNA/test/indelCallFillter.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/indelCallFillter.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/test/indelCallFillter.py	/^import sys,getopt$/;"	i
re	projFocus/ceRNA/test/indelCallFillter.py	/^import re$/;"	i
collections	projFocus/ceRNA/test/indelCallFillter.py	/^import collections$/;"	i
usage	projFocus/ceRNA/test/indelCallFillter.py	/^usage="Usage: indelFilter.py -i <input.VCF> -o <output.VCF>"$/;"	v
example	projFocus/ceRNA/test/indelCallFillter.py	/^example="Example:" $/;"	v
argv	projFocus/ceRNA/test/indelCallFillter.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/test/indelCallFillter.py	/^            inp = arg$/;"	v
out	projFocus/ceRNA/test/indelCallFillter.py	/^            out = arg$/;"	v
gtnorm_cut	projFocus/ceRNA/test/indelCallFillter.py	/^gtnorm_cut = '0\/0'$/;"	v
pltum_cut	projFocus/ceRNA/test/indelCallFillter.py	/^pltum_cut = 40$/;"	v
plnorm_cut	projFocus/ceRNA/test/indelCallFillter.py	/^plnorm_cut = 30$/;"	v
clr_cut	projFocus/ceRNA/test/indelCallFillter.py	/^clr_cut = 1$/;"	v
dp3_cut	projFocus/ceRNA/test/indelCallFillter.py	/^dp3_cut = 1$/;"	v
dp4_cut	projFocus/ceRNA/test/indelCallFillter.py	/^dp4_cut = 1$/;"	v
dp34_cut	projFocus/ceRNA/test/indelCallFillter.py	/^dp34_cut = 3$/;"	v
dp_cut	projFocus/ceRNA/test/indelCallFillter.py	/^dp_cut = 10$/;"	v
mq0_cut	projFocus/ceRNA/test/indelCallFillter.py	/^mq0_cut =  0.1$/;"	v
dpnorm_cut	projFocus/ceRNA/test/indelCallFillter.py	/^dpnorm_cut = 1$/;"	v
mafnorm_cut	projFocus/ceRNA/test/indelCallFillter.py	/^mafnorm_cut = 0.05$/;"	v
maftum_cut	projFocus/ceRNA/test/indelCallFillter.py	/^maftum_cut = 0$/;"	v
snv_type	projFocus/ceRNA/test/indelCallFillter.py	/^snv_type = 'GERMLINE'$/;"	v
funcClass_type	projFocus/ceRNA/test/indelCallFillter.py	/^funcClass_type = 'synonymousSNV'$/;"	v
fpgeneArray	projFocus/ceRNA/test/indelCallFillter.py	/^fpgeneArray = []$/;"	v
outf	projFocus/ceRNA/test/indelCallFillter.py	/^outf = open(out,'w')$/;"	v
flag_header	projFocus/ceRNA/test/indelCallFillter.py	/^flag_header = 1 $/;"	v
cnt_line	projFocus/ceRNA/test/indelCallFillter.py	/^cnt_line = 0 $/;"	v
cnt_res	projFocus/ceRNA/test/indelCallFillter.py	/^cnt_res = 0$/;"	v
tempHeader	projFocus/ceRNA/test/indelCallFillter.py	/^                  tempHeader = line.strip().split("\\t")$/;"	v
sample1Name	projFocus/ceRNA/test/indelCallFillter.py	/^                  sample1Name = tempHeader[-2]$/;"	v
sample2Name	projFocus/ceRNA/test/indelCallFillter.py	/^                  sample2Name = tempHeader[-1]$/;"	v
cnt_line	projFocus/ceRNA/test/indelCallFillter.py	/^                  cnt_line = cnt_line + 1$/;"	v
infoArray	projFocus/ceRNA/test/indelCallFillter.py	/^                        infoArray = info.split(";")$/;"	v
infoDict	projFocus/ceRNA/test/indelCallFillter.py	/^                        infoDict = {}$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                        flag=1$/;"	v
temp	projFocus/ceRNA/test/indelCallFillter.py	/^                             temp = infosub.split("=")$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
formatArray	projFocus/ceRNA/test/indelCallFillter.py	/^                        formatArray = format.split(":")$/;"	v
sample1Array	projFocus/ceRNA/test/indelCallFillter.py	/^                        sample1Array = sample1.split(":")$/;"	v
sample2Array	projFocus/ceRNA/test/indelCallFillter.py	/^                        sample2Array = sample2.split(":")$/;"	v
idxAD	projFocus/ceRNA/test/indelCallFillter.py	/^                             idxAD = formatArray.index('AD')$/;"	v
s1temp	projFocus/ceRNA/test/indelCallFillter.py	/^                             s1temp = sample1Array[idxAD].split(",")$/;"	v
s2temp	projFocus/ceRNA/test/indelCallFillter.py	/^                             s2temp = sample2Array[idxAD].split(",")$/;"	v
sample1Ref	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample1Ref = '-'$/;"	v
sample1Alt	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample2Ref = '-'$/;"	v
sample2Alt	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample2Alt = '-'$/;"	v
sample1Ref	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample1Ref = sample1Array[idxAD].split(",")[0]$/;"	v
sample1Alt	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample1Alt = '-'$/;"	v
sample2Ref	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample2Ref = sample2Array[idxAD].split(",")[0]$/;"	v
sample2Alt	projFocus/ceRNA/test/indelCallFillter.py	/^                               sample2Alt = '-'$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0 $/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0 $/;"	v
mafnorm	projFocus/ceRNA/test/indelCallFillter.py	/^                             mafnorm = int(sample2Alt) \/ int(sample2Ref) $/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                                    flag = 0 $/;"	v
sample1PL_homoRef	projFocus/ceRNA/test/indelCallFillter.py	/^                        sample1PL_homoRef = sample1Array[formatArray.index('PL')].split(",")[0]  $/;"	v
sample2PL_hete	projFocus/ceRNA/test/indelCallFillter.py	/^                        sample2PL_hete = sample2Array[formatArray.index('PL')].split(",")[1]  $/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag = 0 $/;"	v
flag_header	projFocus/ceRNA/test/indelCallFillter.py	/^                             flag_header = 0$/;"	v
cnt_res	projFocus/ceRNA/test/indelCallFillter.py	/^                              cnt_res = cnt_res + 1$/;"	v
os	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import math$/;"	i
re	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import re$/;"	i
stats	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^import numpy as np$/;"	i
Gene	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^class Gene:$/;"	c
__init__	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  def __init__(self, name, chrom, pos, strand, val):$/;"	m	class:Gene
__lt__	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  def __lt__(self, other):$/;"	m	class:Gene	file:
argv	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^inps      = ''$/;"	v
inpe	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^inpe      = ''$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^fdr_cut	  = 1e-6 $/;"	v
outp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^outp      = ''$/;"	v
region_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^region_cut	  = 1000000$/;"	v
chroms	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrom2Num	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def num2Chrom(num):$/;"	f
isInRange	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def pAdj(plist,type):$/;"	f
binarySearch	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^def binarySearch(chromPosArray, pos):$/;"	f
allChroms	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^allChroms = map(str,range(24)) + ['X','Y','x','y']$/;"	v
chromArray	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^chromArray = [[] for _ in range(24)] ##sort chrom pos information$/;"	v
genePosDict	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^genePosDict  = {} ## stor chrom_pos genename, values mapping information$/;"	v
i	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^i = 0$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpef.readline()  $/;"	v
headerExp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  headerExp = line.strip().split("\\t",4)[4]$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpef.readline()$/;"	v
i	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    i = i + 1$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    line = inpef.readline()$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      chrom = chrom2Num(chrom)$/;"	v
pos	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      pos = int(pos)$/;"	v
gene	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      gene = Gene(identifier, chrom, pos, strand, val)$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^chromDict = [{} for _ in range(24)]$/;"	v
pvalArray	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^pvalArray = []$/;"	v
snpdataDict	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^snpdataDict      = {}$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^cnt_out          = 0$/;"	v
snpNameSet	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^snpNameSet = set()$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
headerSnp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  headerSnp = line.strip().split("\\t",4)[4]$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    line = inpsf.readline()$/;"	v
snpdataDict	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^snpdataDict = dict()$/;"	v
cnt_snp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^cnt_snp = 0 $/;"	v
cnt_p	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^cnt_p = 0$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    line = inpsf.readline()$/;"	v
snpdata	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    snpdata = Gene(snpname, chrom, pos, strand, val)$/;"	v
cnt_snp	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^    cnt_snp = cnt_snp + 1 $/;"	v
chrom	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      tempEnd = int(pos) + region_cut$/;"	v
index	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^      index = binarySearch(chromArray[chrom], tempStart)$/;"	v
expgene	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^        expgene = chromArray[chrom][index]$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          cnt_out = cnt_out + 1$/;"	v
snpval	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          snpval = map(int, val.split("\\t"))$/;"	v
expval	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          expval = map(float,expgene.val.split("\\t"))$/;"	v
genename	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          genename = expgene.name$/;"	v
cnt_p	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          cnt_p = cnt_p + 1$/;"	v
index	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^          index = index + 1$/;"	v
expgene	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^            expgene = chromArray[chrom][index]$/;"	v
outpf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut) + ".mat",'w')$/;"	v
outpsnpf	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^outpsnpf= open(outp + ".adj.snp",'w')$/;"	v
p_old	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_utest_KWtest_v3.py	/^        cnt_out = cnt_out + 1$/;"	v
sys	projFocus/ceRNA/test/mergeMeth27_45.py	/^import sys$/;"	i
re	projFocus/ceRNA/test/mergeMeth27_45.py	/^import re$/;"	i
inp1	projFocus/ceRNA/test/mergeMeth27_45.py	/^inp1=sys.argv[1]$/;"	v
inp2	projFocus/ceRNA/test/mergeMeth27_45.py	/^inp2=sys.argv[2]$/;"	v
inpT	projFocus/ceRNA/test/mergeMeth27_45.py	/^  inpT = pid + "-Tu.somatic.FINAL"$/;"	v
inpR	projFocus/ceRNA/test/mergeMeth27_45.py	/^  inpR = pid + "-Re.somatic.FINAL"$/;"	v
outT	projFocus/ceRNA/test/mergeMeth27_45.py	/^  outT = pid + "_TuOnly.txt"$/;"	v
out3	projFocus/ceRNA/test/mergeMeth27_45.py	/^  out3 = pid + "_CommTuRe.txt"$/;"	v
outR	projFocus/ceRNA/test/mergeMeth27_45.py	/^  outR = pid + "_ReOnly.txt"$/;"	v
chrPosArray	projFocus/ceRNA/test/mergeMeth27_45.py	/^chrPosArray = []$/;"	v
valArray	projFocus/ceRNA/test/mergeMeth27_45.py	/^valArray = []$/;"	v
outfT	projFocus/ceRNA/test/mergeMeth27_45.py	/^outfT = open(outT, 'w')$/;"	v
outfR	projFocus/ceRNA/test/mergeMeth27_45.py	/^outfR = open(outR, 'w')$/;"	v
outf3	projFocus/ceRNA/test/mergeMeth27_45.py	/^outf3 = open(out3, 'w')$/;"	v
tempKey	projFocus/ceRNA/test/mergeMeth27_45.py	/^      tempKey = chrom + "_" + pos$/;"	v
header	projFocus/ceRNA/test/mergeMeth27_45.py	/^      header = tempKey + "\\t" + val$/;"	v
tempKey	projFocus/ceRNA/test/mergeMeth27_45.py	/^      tempKey = chrom + "_" + pos$/;"	v
idx	projFocus/ceRNA/test/mergeMeth27_45.py	/^        idx = chrPosArray.index(tempKey)$/;"	v
os	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^argv = sys.argv[1:]$/;"	v
inpc	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    inpc = arg$/;"	v
inpg	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    inpg = arg$/;"	v
inpm	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    inpm = arg$/;"	v
inps	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    inps = arg$/;"	v
out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    out = arg$/;"	v
outlog	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    outlog = out + ".log"$/;"	v
outlogf	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^outlogf = open(outlog,'w')$/;"	v
region_cut	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^region_cut = 1000000 # 1M$/;"	v
amp_cut	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^amp_cut = float(0.3)$/;"	v
del_cut	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^del_cut = float(-0.3)$/;"	v
nesp	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^nesp = 1$/;"	v
nval	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^nval = 5 - 1$/;"	v
chrom2Num	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^def num2Chrom(num):$/;"	f
fnArray	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^fnArray = []$/;"	v
nCNVSamples	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^nCNVSamples = len(fnArray)$/;"	v
chromArray	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^chromArray = [[] for _ in range(24)]$/;"	v
headerExp	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      headerExp = line.strip()$/;"	v
chrom	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      chrom = chrom2Num(chrom)$/;"	v
isCNV	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^def isCNV(x):$/;"	f
idfile	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^idfile = -1$/;"	v
chromDict	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^chromDict = [{} for _ in range(24)]$/;"	v
fntempf	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    fntempf = open(fn)$/;"	v
idfile	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^    idfile = idfile + 1$/;"	v
chrom	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^          chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^          tempStart = int(pStart) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^          tempEnd = int(pEnd) + region_cut$/;"	v
cnt_out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^cnt_out = 0 $/;"	v
myCol	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^def myCol(matrix,i):$/;"	f
outf	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^outf = open(out,'w')$/;"	v
cnt_out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^chromDict = [{} for _ in range(24)]$/;"	v
headerSnp	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      headerSnp = line.strip()$/;"	v
chrom	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      tempEnd = int(pos) + region_cut$/;"	v
chromID	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^  chromID = num2Chrom(idx) $/;"	v
cnt_out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      cnt_out = cnt_out + 1$/;"	v
cnt_out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^chromDict = [{} for _ in range(24)]$/;"	v
headerMeth	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      headerMeth = line.strip()$/;"	v
chrom	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      tempEnd = int(pos) + region_cut$/;"	v
chromID	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^  chromID = num2Chrom(idx) $/;"	v
cnt_out	projFocus/ceRNA/test/make_Mat_cnvByGene_level3.py	/^      cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/test/do_grpLassoSNP.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/do_grpLassoSNP.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/test/do_grpLassoSNP.py	/^import sys,getopt$/;"	i
inpe	projFocus/ceRNA/test/do_grpLassoSNP.py	/^inpe = 'test_exp_chr22.mat'$/;"	v
inps	projFocus/ceRNA/test/do_grpLassoSNP.py	/^inps = 'test_snp_chr22.mat'$/;"	v
inpm	projFocus/ceRNA/test/do_grpLassoSNP.py	/^inpm = 'test_meth_chr22.mat'$/;"	v
mainDict	projFocus/ceRNA/test/do_grpLassoSNP.py	/^mainDict = {} $/;"	v
key	projFocus/ceRNA/test/do_grpLassoSNP.py	/^      key = chr + ":" + pos  $/;"	v
key	projFocus/ceRNA/test/do_grpLassoSNP.py	/^      key = chr + ":" + pos  $/;"	v
key	projFocus/ceRNA/test/do_grpLassoSNP.py	/^      key = chr + ":" + pos  $/;"	v
amp_cut	projFocus/ceRNA/test/do_grpLassoSNP.py	/^amp_cut = 0.3$/;"	v
del_cut	projFocus/ceRNA/test/do_grpLassoSNP.py	/^del_cut = -0.3$/;"	v
printSysTime	projFocus/ceRNA/test/indelCall-v1.sh	/^printSysTime() {$/;"	f
os	projFocus/ceRNA/test/filterSNP_test.py	/^import os$/;"	i
sys	projFocus/ceRNA/test/filterSNP_test.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/test/filterSNP_test.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/test/filterSNP_test.py	/^import math$/;"	i
re	projFocus/ceRNA/test/filterSNP_test.py	/^import re$/;"	i
stats	projFocus/ceRNA/test/filterSNP_test.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/test/filterSNP_test.py	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/test/filterSNP_test.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/test/filterSNP_test.py	/^inps      = ''$/;"	v
inpe	projFocus/ceRNA/test/filterSNP_test.py	/^inpe      = ''$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_test.py	/^fdr_cut	  = 0.5  $/;"	v
outp	projFocus/ceRNA/test/filterSNP_test.py	/^outp      = ''$/;"	v
inps	projFocus/ceRNA/test/filterSNP_test.py	/^     inps = arg$/;"	v
inpe	projFocus/ceRNA/test/filterSNP_test.py	/^     inpe = arg$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_test.py	/^     fdr_cut = arg$/;"	v
outp	projFocus/ceRNA/test/filterSNP_test.py	/^     outp = arg$/;"	v
region_cut	projFocus/ceRNA/test/filterSNP_test.py	/^region_cut	  = 100000000$/;"	v
chroms	projFocus/ceRNA/test/filterSNP_test.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/test/filterSNP_test.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/test/filterSNP_test.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/test/filterSNP_test.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrom2Num	projFocus/ceRNA/test/filterSNP_test.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/test/filterSNP_test.py	/^def num2Chrom(num):$/;"	f
isInRange	projFocus/ceRNA/test/filterSNP_test.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/test/filterSNP_test.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/test/filterSNP_test.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/test/filterSNP_test.py	/^def pAdj(plist,type):$/;"	f
allChroms	projFocus/ceRNA/test/filterSNP_test.py	/^allChroms = map(str,range(22)) + ['X','Y','x','y']$/;"	v
chromArray	projFocus/ceRNA/test/filterSNP_test.py	/^chromArray = [[] for _ in range(24)] ##sort chrom pos information$/;"	v
genePosDict	projFocus/ceRNA/test/filterSNP_test.py	/^genePosDict  = {} ## stor chrom_pos genename, values mapping information$/;"	v
headerExp	projFocus/ceRNA/test/filterSNP_test.py	/^      headerExp = line.strip().split("\\t",4)[4]$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_test.py	/^        chrom = chrom2Num(chrom)$/;"	v
pos	projFocus/ceRNA/test/filterSNP_test.py	/^        pos = int(pos)$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_test.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/test/filterSNP_test.py	/^chromDict = [{} for _ in range(24)]$/;"	v
pvalArray	projFocus/ceRNA/test/filterSNP_test.py	/^pvalArray = []$/;"	v
outpf	projFocus/ceRNA/test/filterSNP_test.py	/^outpf            = open(outp,'w')$/;"	v
snpdataDict	projFocus/ceRNA/test/filterSNP_test.py	/^snpdataDict      = {}$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_test.py	/^cnt_out          = 0$/;"	v
headerSnp	projFocus/ceRNA/test/filterSNP_test.py	/^      headerSnp = line.strip().split("\\t",4)[4]$/;"	v
chrom	projFocus/ceRNA/test/filterSNP_test.py	/^        chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/test/filterSNP_test.py	/^        tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/test/filterSNP_test.py	/^        tempEnd = int(pos) + region_cut$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_test.py	/^                cnt_out = cnt_out + 1$/;"	v
snpval	projFocus/ceRNA/test/filterSNP_test.py	/^                snpval = map(int, val.split("\\t"))$/;"	v
expval	projFocus/ceRNA/test/filterSNP_test.py	/^                expval = map(float,genePosDict[(chrom,genePos)][1].split("\\t"))$/;"	v
genename	projFocus/ceRNA/test/filterSNP_test.py	/^                genename = genePosDict[(chrom,genePos)][0]		#[zscore,pval] = rUTest(exp,snpval)$/;"	v
outpf	projFocus/ceRNA/test/filterSNP_test.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut) + ".mat",'w')$/;"	v
outpsnpf	projFocus/ceRNA/test/filterSNP_test.py	/^outpsnpf= open(outp + ".adj.snp",'w')$/;"	v
p_old	projFocus/ceRNA/test/filterSNP_test.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/test/filterSNP_test.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_test.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/test/filterSNP_test.py	/^        cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/compareFileCols.py	/^import os$/;"	i
sys	projFocus/ceRNA/compareFileCols.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/compareFileCols.py	/^import sys,getopt$/;"	i
argv	projFocus/ceRNA/compareFileCols.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/compareFileCols.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/compareFileCols.py	/^inp2 = ''$/;"	v
inp1	projFocus/ceRNA/compareFileCols.py	/^    inp1 = arg$/;"	v
outp1	projFocus/ceRNA/compareFileCols.py	/^    outp1 = inp1 + ".comm"$/;"	v
inp2	projFocus/ceRNA/compareFileCols.py	/^    inp2 = arg$/;"	v
outp2	projFocus/ceRNA/compareFileCols.py	/^    outp2 = inp2 + ".comm"$/;"	v
colNames1	projFocus/ceRNA/compareFileCols.py	/^      colNames1 = line.strip().split("\\t")[4:]$/;"	v
colNames2	projFocus/ceRNA/compareFileCols.py	/^      colNames2 = line.strip().split("\\t")[4:]$/;"	v
mySubstr	projFocus/ceRNA/compareFileCols.py	/^def mySubstr(x):$/;"	f
colN1	projFocus/ceRNA/compareFileCols.py	/^colN1 = map(mySubstr,colNames1)$/;"	v
colN2	projFocus/ceRNA/compareFileCols.py	/^colN2 = map(mySubstr,colNames2)$/;"	v
comm	projFocus/ceRNA/compareFileCols.py	/^comm = list(set(colN1)&set(colN2))$/;"	v
idx_colN1	projFocus/ceRNA/compareFileCols.py	/^idx_colN1 = [0,1,2,3]$/;"	v
idx_colN2	projFocus/ceRNA/compareFileCols.py	/^idx_colN2 = [0,1,2,3]$/;"	v
outMyIdx	projFocus/ceRNA/compareFileCols.py	/^def outMyIdx(valArray,idxArray):$/;"	f
outMyIdxFile	projFocus/ceRNA/compareFileCols.py	/^def outMyIdxFile(filename,out,idx):$/;"	f
sys	projFocus/ceRNA/do_Beta2M_meth.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/do_Beta2M_meth.py	/^import sys,getopt$/;"	i
os	projFocus/ceRNA/do_Beta2M_meth.py	/^import os$/;"	i
math	projFocus/ceRNA/do_Beta2M_meth.py	/^import math$/;"	i
inp1	projFocus/ceRNA/do_Beta2M_meth.py	/^inp1 = sys.argv[1]$/;"	v
outp	projFocus/ceRNA/do_Beta2M_meth.py	/^outp = inp1 + ".Mval"$/;"	v
outlog	projFocus/ceRNA/do_Beta2M_meth.py	/^outlog = inp1 + ".Mval.log"$/;"	v
beta2M	projFocus/ceRNA/do_Beta2M_meth.py	/^def beta2M(x):$/;"	f
flag	projFocus/ceRNA/do_Beta2M_meth.py	/^def flag(x):$/;"	f
outpf	projFocus/ceRNA/do_Beta2M_meth.py	/^outpf = open(outp,'w')$/;"	v
outlogf	projFocus/ceRNA/do_Beta2M_meth.py	/^outlogf = open(outlog,'w')$/;"	v
cnt_out	projFocus/ceRNA/do_Beta2M_meth.py	/^cnt_out = 1$/;"	v
os	projFocus/ceRNA/getCols.py	/^import os$/;"	i
sys	projFocus/ceRNA/getCols.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/getCols.py	/^import sys,getopt$/;"	i
argv	projFocus/ceRNA/getCols.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/getCols.py	/^inp1 = ''$/;"	v
inpc	projFocus/ceRNA/getCols.py	/^inpc = ''$/;"	v
out	projFocus/ceRNA/getCols.py	/^out = ''$/;"	v
inp1	projFocus/ceRNA/getCols.py	/^    inp1 = arg$/;"	v
inpc	projFocus/ceRNA/getCols.py	/^    inpc = arg $/;"	v
out	projFocus/ceRNA/getCols.py	/^    out = arg$/;"	v
colnames_new	projFocus/ceRNA/getCols.py	/^colnames_new = []$/;"	v
outf	projFocus/ceRNA/getCols.py	/^outf = open(out,'w')  $/;"	v
colnames_old	projFocus/ceRNA/getCols.py	/^      colnames_old = line.strip().split("\\t")[4:]$/;"	v
index_col2keep	projFocus/ceRNA/getCols.py	/^      index_col2keep = [0,1,2,3] + map(lambda x:x+4,[a for a in range(len(colnames_old)) if colnames_old[a] in colnames_new])$/;"	v
colnames_old	projFocus/ceRNA/getCols.py	/^      colnames_old = line.strip().split("\\t")$/;"	v
col_old	projFocus/ceRNA/getCols.py	/^      col_old = line.strip().split("\\t")$/;"	v
col_new	projFocus/ceRNA/getCols.py	/^      col_new = [col_old[i] for i in index_col2keep]  $/;"	v
os	projFocus/ceRNA/annotSNP_v2.py	/^import os$/;"	i
sys	projFocus/ceRNA/annotSNP_v2.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/annotSNP_v2.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/annotSNP_v2.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/annotSNP_v2.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/annotSNP_v2.py	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/annotSNP_v2.py	/^outp = ''$/;"	v
usage	projFocus/ceRNA/annotSNP_v2.py	/^usage = 'python annotSNP_v2.py -i <inputfile> -d <snp annotation file> -o <output file name> ' $/;"	v
example	projFocus/ceRNA/annotSNP_v2.py	/^example = '~\/tools\/python\/Python_current\/python annot_SNP.py -i ~\/SCRATCH\/projFocus\/ceRNA\/data\/snpArray\/brca_snp_brca_snp_level3_839.mat -d ~\/SCRATCH\/database\/projFocusRef\/ann    ot_GenomeWideSNP_6_5cols_clean.txt -o ~\/SCRATCH\/projFocus\/ceRNA\/data\/snpArray\/brca_snp_839.mat.annot'$/;"	v
inp1	projFocus/ceRNA/annotSNP_v2.py	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/annotSNP_v2.py	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/annotSNP_v2.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/annotSNP_v2.py	/^    outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/annotSNP_v2.py	/^outlogf = open(outlog,"w")$/;"	v
outpf	projFocus/ceRNA/annotSNP_v2.py	/^outpf = open(outp,"w")$/;"	v
inp1Dict	projFocus/ceRNA/annotSNP_v2.py	/^inp1Dict = {}$/;"	v
outHeader1	projFocus/ceRNA/annotSNP_v2.py	/^      outHeader1 = line.split("\\t",1)[1]$/;"	v
cnt_out	projFocus/ceRNA/annotSNP_v2.py	/^cnt_out = 0$/;"	v
outKey	projFocus/ceRNA/annotSNP_v2.py	/^outKey = []$/;"	v
outHeader2	projFocus/ceRNA/annotSNP_v2.py	/^      outHeader2 = "\\t".join(map(str,line.strip().split("\\t")[:4]))$/;"	v
cnt_out	projFocus/ceRNA/annotSNP_v2.py	/^	cnt_out = cnt_out + 1$/;"	v
Num2	projFocus/ceRNA/doc/projFocusWorkFlow_main.html	/^<a name=Num2>&nbsp<\/a>$/;"	a
Num3	projFocus/ceRNA/doc/projFocusWorkFlow_main.html	/^<a name=Num3>&nbsp<\/a>$/;"	a
Num4	projFocus/ceRNA/doc/projFocusWorkFlow_main.html	/^<a name=Num4>&nbsp<\/a>$/;"	a
Background and Questions	projFocus/ceRNA/doc/projFocusCeRNAproposal.tex	/^\\section{Background and Questions}$/;"	s
Methods	projFocus/ceRNA/doc/projFocusCeRNAproposal.tex	/^\\section{Methods}$/;"	s
Background and Questions	projFocus/ceRNA/doc/projFocusCeRNA_GCgene.tex	/^\\section{Background and Questions}$/;"	s
Methods	projFocus/ceRNA/doc/projFocusCeRNA_GCgene.tex	/^\\section{Methods}$/;"	s
os	projFocus/ceRNA/filterIndel.py	/^import os$/;"	i
sys	projFocus/ceRNA/filterIndel.py	/^import sys,getopt$/;"	i
getopt	projFocus/ceRNA/filterIndel.py	/^import sys,getopt$/;"	i
re	projFocus/ceRNA/filterIndel.py	/^import re$/;"	i
collections	projFocus/ceRNA/filterIndel.py	/^import collections$/;"	i
usage	projFocus/ceRNA/filterIndel.py	/^usage = "Usage: filterIndel.py -i <input.vcf> -o <out.vcf> \\nExample: filterIndel.py -i \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/result\/indelCall\/test\/TCGA-A1-A0SD-01A-11D-A10Y-09.bam_dindel_ouput.variantCalls.VCF -o \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/result\/indelCall\/test\/TCGA-A1-A0SD-01A-11D-A10Y-09.bam_dindel_ouput.variantCalls.VCF.filtered.VCF"$/;"	v
argv	projFocus/ceRNA/filterIndel.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/filterIndel.py	/^            inp = arg$/;"	v
out	projFocus/ceRNA/filterIndel.py	/^            out = arg$/;"	v
outlog	projFocus/ceRNA/filterIndel.py	/^            outlog = out + ".log"$/;"	v
dp3_cut	projFocus/ceRNA/filterIndel.py	/^dp3_cut = 1$/;"	v
dp4_cut	projFocus/ceRNA/filterIndel.py	/^dp4_cut = 1$/;"	v
dp34_cut	projFocus/ceRNA/filterIndel.py	/^dp34_cut = 3$/;"	v
dp_cut	projFocus/ceRNA/filterIndel.py	/^dp_cut = 10$/;"	v
filter_val	projFocus/ceRNA/filterIndel.py	/^filter_val ='PASS'$/;"	v
outf	projFocus/ceRNA/filterIndel.py	/^outf = open(out,'w')$/;"	v
flag_header	projFocus/ceRNA/filterIndel.py	/^flag_header = 1 $/;"	v
cnt_line	projFocus/ceRNA/filterIndel.py	/^cnt_line = 0 $/;"	v
cnt_res	projFocus/ceRNA/filterIndel.py	/^cnt_res = 0$/;"	v
cnt_line	projFocus/ceRNA/filterIndel.py	/^                  cnt_line = cnt_line + 1$/;"	v
infoArray	projFocus/ceRNA/filterIndel.py	/^                        infoArray = info.split(";")$/;"	v
infoDict	projFocus/ceRNA/filterIndel.py	/^                        infoDict = {}$/;"	v
flag	projFocus/ceRNA/filterIndel.py	/^                        flag=1$/;"	v
temp	projFocus/ceRNA/filterIndel.py	/^                             temp = infosub.split("=")$/;"	v
flag	projFocus/ceRNA/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/filterIndel.py	/^                             flag = 0$/;"	v
flag	projFocus/ceRNA/filterIndel.py	/^                             flag = 0  $/;"	v
flag	projFocus/ceRNA/filterIndel.py	/^			     flag = 0$/;"	v
cnt_res	projFocus/ceRNA/filterIndel.py	/^                              cnt_res = cnt_res + 1$/;"	v
outlogf	projFocus/ceRNA/filterIndel.py	/^outlogf = open(outlog,'w')$/;"	v
os	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import os$/;"	i
sys	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import math$/;"	i
re	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import re$/;"	i
stats	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^inps = ''$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^inpe = ''$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outp = ''$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^    inps = arg$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^    inpe = arg$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^    outp = arg$/;"	v
cutoff	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^cutoff	  = 1,000,000$/;"	v
chroms	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^fdr_cut	  = 1e-8  $/;"	v
outlogf	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outlogf	  = open(outlog,'w')$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outp = outp + "_" + str(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outlog = outp + ".log"$/;"	v
chrArrayExp	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^chrArrayExp = [{} for _ in range(24)]$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^				tempP = pos.split(":")$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					tempP = map(int,tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^						pos = min(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^						pos = max(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^				chrom = int(chrom)$/;"	v
isInRange	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^def pAdj(plist,type):$/;"	f
outpf	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outpf = open(outp,'w')$/;"	v
pvalArray	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^pvalArray = []$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^snpdataDict = {}$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^cnt_out	    = 0 $/;"	v
header_snpSample	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^			header_snpSample = line.strip().split("\\t",4)[3]$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^				pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^				chrom = int(chrom)$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^							cnt_out  = cnt_out + 1$/;"	v
exp_data	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^							exp_data      = chrArrayExp[chrom - 1][key][2]$/;"	v
snpval	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^							snpval	      = map(int,val.strip().split("\\t"))$/;"	v
exp	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^							exp	      = map(float,re.compile("\\s+").split(exp_data.strip()))$/;"	v
genename	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^							genename      = chrArrayExp[chrom - 1][key][0]$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^outpf = open(outp".adjPass_" + str(fdr_cutt),'w')$/;"	v
p_old	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/filterSNP_utest_KWtest.py	/^p_new	= pAdj(p_old,'b')$/;"	v
printSysTime	projFocus/ceRNA/indelCall_v4.sh	/^printSysTime() {$/;"	f
sys	projFocus/ceRNA/getSingleStartEnd.py	/^import sys$/;"	i
inpFile	projFocus/ceRNA/getSingleStartEnd.py	/^inpFile = "entrez_annotation_hg19.txt"$/;"	v
outFile	projFocus/ceRNA/getSingleStartEnd.py	/^outFile = "entrez_annotation_hg19_unique.txt"$/;"	v
outFileHandler	projFocus/ceRNA/getSingleStartEnd.py	/^outFileHandler = open(outFile,'w')$/;"	v
cntLine	projFocus/ceRNA/getSingleStartEnd.py	/^cntLine = 0 $/;"	v
geneInfoOld	projFocus/ceRNA/getSingleStartEnd.py	/^      geneInfoOld = ["gene","chrom","start","end","strand"]$/;"	v
chrom	projFocus/ceRNA/getSingleStartEnd.py	/^      chrom = chrom.replace("chr","") $/;"	v
geneInfoCrt	projFocus/ceRNA/getSingleStartEnd.py	/^      geneInfoCrt = [geneId, chrom, start, end, strand]$/;"	v
geneInfoOld	projFocus/ceRNA/getSingleStartEnd.py	/^        geneInfoOld = geneInfoCrt $/;"	v
geneInfoOld	projFocus/ceRNA/getSingleStartEnd.py	/^	geneInfoOld = geneInfoCrt $/;"	v
cntLine	projFocus/ceRNA/getSingleStartEnd.py	/^    cntLine = cntLine + 1$/;"	v
os	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import os$/;"	i
sys	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import math$/;"	i
re	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import re$/;"	i
stats	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^inps = ''$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^inpe = ''$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^fdr_cut	  = 1e-8  $/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^outp = ''$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^    inps = arg$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^    inpe = arg$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^    fdr_cut = arg$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^    outp = arg$/;"	v
cutoff	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^cutoff	  = 1000000$/;"	v
chroms	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrArrayExp	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^chrArrayExp = [{} for _ in range(24)]$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^				tempP = pos.split(":")$/;"	v
tempP	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					tempP = map(int,tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^						pos = min(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^						pos = max(tempP)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^				chrom = int(chrom)$/;"	v
isInRange	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^def pAdj(plist,type):$/;"	f
outpf	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^outpf = open(outp,'w')$/;"	v
pvalArray	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^pvalArray = []$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^snpdataDict = {}$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^cnt_out	    = 0 $/;"	v
header_snpSample	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^			header_snpSample = line.strip().split("\\t",4)[4]$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^				pos = int(pos)$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					chrom = 23$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^					chrom = 24$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^				chrom = int(chrom)$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^							cnt_out  = cnt_out + 1$/;"	v
exp_data	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^							exp_data      = chrArrayExp[chrom - 1][key][2]$/;"	v
snpval	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^							snpval	      = map(int,val.strip().split("\\t"))$/;"	v
exp	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^							exp	      = map(float,re.compile("\\s+").split(exp_data.strip()))$/;"	v
genename	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^							genename      = chrArrayExp[chrom - 1][key][0]$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut),'w')$/;"	v
p_old	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v1.py	/^    cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/get_tss_anno_byGene.py	/^import os$/;"	i
sys	projFocus/ceRNA/get_tss_anno_byGene.py	/^import sys$/;"	i
argv	projFocus/ceRNA/get_tss_anno_byGene.py	/^argv = sys.argv[1:]$/;"	v
in_file	projFocus/ceRNA/get_tss_anno_byGene.py	/^in_file = argv[0]$/;"	v
out_file	projFocus/ceRNA/get_tss_anno_byGene.py	/^out_file = in_file + ".signleTSS"$/;"	v
outf	projFocus/ceRNA/get_tss_anno_byGene.py	/^outf = open(out_file,"w")$/;"	v
d	projFocus/ceRNA/get_tss_anno_byGene.py	/^d = {}$/;"	v
printSysTime	projFocus/ceRNA/indelCall_v3reqsub.sh	/^printSysTime() {$/;"	f
qsubRun	projFocus/ceRNA/runs/runResultIndelCall.sh	/^qsubRun (){$/;"	f
delBam	projFocus/ceRNA/runs/runResultIndelCall.sh	/^delBam() {$/;"	f
normalIndex	projFocus/ceRNA/runs/runResultGrpreg_old.sh	/^normalIndex (){$/;"	f
getGeneCerna	projFocus/ceRNA/runs/runResultBridge_GCGene.sh	/^function getGeneCerna(){$/;"	f
getCerna	projFocus/ceRNA/runs/runResultBridge_GCGene.sh	/^function getCerna(){$/;"	f
extractOneData4Gene	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function extractOneData4Gene()$/;"	f
extractAllData4Gene_GCgene	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function extractAllData4Gene_GCgene()$/;"	f
pSystime	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function pSystime()$/;"	f
runGrplasso	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function runGrplasso() {$/;"	f
getGenelist	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function getGenelist(){$/;"	f
grpLasso	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function grpLasso (){$/;"	f
runFilterGrpLasso	projFocus/ceRNA/runs/runResultGrpreg_GCGene.sh	/^function runFilterGrpLasso(){$/;"	f
qsubRun	projFocus/ceRNA/runs/runResultIndelCall_reqsub.sh	/^qsubRun (){$/;"	f
check	projFocus/ceRNA/runs/runResultIndelCall_reqsub.sh	/^check() {$/;"	f
qsub_Grplasso	projFocus/ceRNA/runs/runResultGrpregTest.sh	/^function qsub_Grplasso()$/;"	f
extractsnp	projFocus/ceRNA/runs/runValidation1k.sh	/^extractsnp(){$/;"	f
extractOneData4Gene	projFocus/ceRNA/runs/runResultFtest_GCGene.sh	/^function extractOneData4Gene()$/;"	f
extractAllData4Gene_GCgene	projFocus/ceRNA/runs/runResultFtest_GCGene.sh	/^function extractAllData4Gene_GCgene()$/;"	f
pSystime	projFocus/ceRNA/runs/runResultFtest_GCGene.sh	/^function pSystime()$/;"	f
runFtest	projFocus/ceRNA/runs/runResultFtest_GCGene.sh	/^function runFtest() {$/;"	f
grpCNV	projFocus/ceRNA/runs/runResultFtest_GCGene.sh	/^function grpCNV (){$/;"	f
combineLog	projFocus/ceRNA/runs/runResultSNP.sh	/^combineLog(){$/;"	f
combineSnpMatrix4Genes	projFocus/ceRNA/runs/runResultSNP.sh	/^combineSnpMatrix4Genes() {$/;"	f
chrFilterSNP	projFocus/ceRNA/runs/runResultSNP.sh	/^function chrFilterSNP(){$/;"	f
chrFilterSNP	projFocus/ceRNA/runs/runResultSNP.sh	/^function chrFilterSNP(){$/;"	f
chrFilterSNP_v2	projFocus/ceRNA/runs/runResultSNP.sh	/^function chrFilterSNP_v2(){$/;"	f
qsub_Grplasso	projFocus/ceRNA/runs/runResultGrpreg.sh	/^function qsub_Grplasso()$/;"	f
qsub_GrplassoCnv	projFocus/ceRNA/runs/runResultGrpreg.sh	/^function qsub_GrplassoCnv()$/;"	f
grpCNV	projFocus/ceRNA/runs/runResultGrpreg.sh	/^function grpCNV (){$/;"	f
extractOneData4Gene	projFocus/ceRNA/runs/runResultFtest.sh	/^function extractOneData4Gene()$/;"	f
extractAllData4Gene	projFocus/ceRNA/runs/runResultFtest.sh	/^function extractAllData4Gene()$/;"	f
extractAllData4Gene_GCgene	projFocus/ceRNA/runs/runResultFtest.sh	/^function extractAllData4Gene_GCgene()$/;"	f
pSystime	projFocus/ceRNA/runs/runResultFtest.sh	/^function pSystime()$/;"	f
runFtest	projFocus/ceRNA/runs/runResultFtest.sh	/^function runFtest() {$/;"	f
grpCNV	projFocus/ceRNA/runs/runResultFtest.sh	/^function grpCNV (){$/;"	f
sys	projFocus/ceRNA/getSingleTSS_exp.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/getSingleTSS_exp.py	/^import sys, getopt$/;"	i
os	projFocus/ceRNA/getSingleTSS_exp.py	/^import os$/;"	i
argv	projFocus/ceRNA/getSingleTSS_exp.py	/^argv = sys.argv[1:]$/;"	v
inpe	projFocus/ceRNA/getSingleTSS_exp.py	/^inpe = argv[0]$/;"	v
out	projFocus/ceRNA/getSingleTSS_exp.py	/^out = argv[1]$/;"	v
outf	projFocus/ceRNA/getSingleTSS_exp.py	/^outf = open(out,'w')$/;"	v
geneDict	projFocus/ceRNA/getSingleTSS_exp.py	/^geneDict = {}$/;"	v
cnt	projFocus/ceRNA/getSingleTSS_exp.py	/^cnt = 0$/;"	v
cnt	projFocus/ceRNA/getSingleTSS_exp.py	/^	  cnt = cnt + 1$/;"	v
os	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import os$/;"	i
sys	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import math$/;"	i
re	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import re$/;"	i
stats	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^import numpy as np$/;"	i
argv	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^inps      = ''$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^inpe      = ''$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^fdr_cut	  = 0.5  $/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outp      = ''$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^     inps = arg$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^     inpe = arg$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^     fdr_cut = arg$/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^     outp = arg$/;"	v
region_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^region_cut	  = 100000000$/;"	v
chroms	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrom2Num	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def num2Chrom(num):$/;"	f
isInRange	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^def pAdj(plist,type):$/;"	f
allChroms	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^allChroms = map(str,range(22)) + ['X','Y','x','y']$/;"	v
chromArray	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^chromArray = [[] for _ in range(24)] ##sort chrom pos information$/;"	v
genePosDict	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^genePosDict  = {} ## stor chrom_pos genename, values mapping information$/;"	v
headerExp	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^      headerExp = line.strip().split("\\t",4)[4]$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        chrom = chrom2Num(chrom)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        pos = int(pos)$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^chromDict = [{} for _ in range(24)]$/;"	v
pvalArray	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^pvalArray = []$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outpf            = open(outp,'w')$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^snpdataDict      = {}$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^cnt_out          = 0$/;"	v
headerSnp	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^      headerSnp = line.strip().split("\\t",4)[4]$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        tempEnd = int(pos) + region_cut$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^                cnt_out = cnt_out + 1$/;"	v
snpval	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^                snpval = map(int, val.split("\\t"))$/;"	v
expval	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^                expval = map(float,genePosDict[(chrom,genePos)][1].split("\\t"))$/;"	v
genename	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^                genename = genePosDict[(chrom,genePos)][0]		#[zscore,pval] = rUTest(exp,snpval)$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut) + ".mat",'w')$/;"	v
outpsnpf	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^outpsnpf= open(outp + ".adj.snp",'w')$/;"	v
p_old	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v2.py	/^        cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/getSomMutMatrix_v2.py	/^import os,sys$/;"	i
sys	projFocus/ceRNA/getSomMutMatrix_v2.py	/^import os,sys$/;"	i
getopt	projFocus/ceRNA/getSomMutMatrix_v2.py	/^import getopt$/;"	i
Set	projFocus/ceRNA/getSomMutMatrix_v2.py	/^from sets import Set$/;"	i
usage	projFocus/ceRNA/getSomMutMatrix_v2.py	/^usage = "python getSomMutMatrix_v2.py -m <in_tcga_level2_somaticMut.maf> -o <out.mat> -s <selected_sample_TCGA_barcode.txt>"$/;"	v
argv	projFocus/ceRNA/getSomMutMatrix_v2.py	/^argv = sys.argv[1:]$/;"	v
mafFile	projFocus/ceRNA/getSomMutMatrix_v2.py	/^        mafFile = arg$/;"	v
sampleFile	projFocus/ceRNA/getSomMutMatrix_v2.py	/^        sampleFile = arg$/;"	v
outFile	projFocus/ceRNA/getSomMutMatrix_v2.py	/^        outFile = arg$/;"	v
gsCont	projFocus/ceRNA/getSomMutMatrix_v2.py	/^def gsCont(gene,sample):$/;"	f
makeNewIdentifier	projFocus/ceRNA/getSomMutMatrix_v2.py	/^def makeNewIdentifier(gene,chrom,startPos,endPos,strand):$/;"	f
mutInfo	projFocus/ceRNA/getSomMutMatrix_v2.py	/^mutInfo = Set()$/;"	v
cntLine	projFocus/ceRNA/getSomMutMatrix_v2.py	/^cntLine = 0 $/;"	v
allGene	projFocus/ceRNA/getSomMutMatrix_v2.py	/^allGene = Set()$/;"	v
allNewId	projFocus/ceRNA/getSomMutMatrix_v2.py	/^allNewId = []$/;"	v
sampleName	projFocus/ceRNA/getSomMutMatrix_v2.py	/^sampleName = []$/;"	v
outFileHander	projFocus/ceRNA/getSomMutMatrix_v2.py	/^outFileHander = open(outFile,'w')$/;"	v
cntGene	projFocus/ceRNA/getSomMutMatrix_v2.py	/^cntGene = 0$/;"	v
cntGene	projFocus/ceRNA/getSomMutMatrix_v2.py	/^    cntGene = cntGene + 1$/;"	v
geneMutTemp	projFocus/ceRNA/getSomMutMatrix_v2.py	/^    geneMutTemp = [] * len(sampleName)$/;"	v
os	projFocus/ceRNA/makeMat_General.py	/^import os$/;"	i
re	projFocus/ceRNA/makeMat_General.py	/^import re $/;"	i
linecache	projFocus/ceRNA/makeMat_General.py	/^import linecache$/;"	i
sys	projFocus/ceRNA/makeMat_General.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/makeMat_General.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/makeMat_General.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/makeMat_General.py	/^inp = ''$/;"	v
outp	projFocus/ceRNA/makeMat_General.py	/^outp = ''$/;"	v
nval	projFocus/ceRNA/makeMat_General.py	/^nval = 2$/;"	v
inp	projFocus/ceRNA/makeMat_General.py	/^     inp = arg$/;"	v
nval	projFocus/ceRNA/makeMat_General.py	/^     nval = int(arg)$/;"	v
nesp	projFocus/ceRNA/makeMat_General.py	/^     nesp = int(arg)$/;"	v
outp	projFocus/ceRNA/makeMat_General.py	/^     outp = arg$/;"	v
outlog	projFocus/ceRNA/makeMat_General.py	/^     outlog = outp + ".log"$/;"	v
file_len	projFocus/ceRNA/makeMat_General.py	/^def file_len(fname):$/;"	f
cntCol	projFocus/ceRNA/makeMat_General.py	/^cntCol = file_len(inp)$/;"	v
fout	projFocus/ceRNA/makeMat_General.py	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/makeMat_General.py	/^  allsamples = [" "] * (cntCol + 1)$/;"	v
line_crt	projFocus/ceRNA/makeMat_General.py	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/makeMat_General.py	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/makeMat_General.py	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/makeMat_General.py	/^a=[open(i,'r',163840) for i in farray]$/;"	v
expt	projFocus/ceRNA/makeMat_General.py	/^	expt=[0] * cntCol$/;"	v
line	projFocus/ceRNA/makeMat_General.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMat_General.py	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/makeMat_General.py	/^			line = f.next()$/;"	v
keynew	projFocus/ceRNA/makeMat_General.py	/^			keynew = line.split("\\t")[0]$/;"	v
val	projFocus/ceRNA/makeMat_General.py	/^			val = line.split("\\t")[(nval - 1)]$/;"	v
ncol	projFocus/ceRNA/makeMat_General.py	/^			ncol = ncol + 1$/;"	v
fout2	projFocus/ceRNA/makeMat_General.py	/^fout2 = open(outlog,'w')$/;"	v
printSysTime	projFocus/ceRNA/indelCall_v3.sh	/^printSysTime() {$/;"	f
os	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import os$/;"	i
sys	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import sys, getopt$/;"	i
math	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import math$/;"	i
re	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import re$/;"	i
stats	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^from scipy import stats$/;"	i
np	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^import numpy as np$/;"	i
Gene	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^class Gene:$/;"	c
__init__	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  def __init__(self, name, chrom, pos, strand, val):$/;"	m	class:Gene
__lt__	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  def __lt__(self, other):$/;"	m	class:Gene	file:
argv	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^argv = sys.argv[1:]$/;"	v
inps	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^inps      = ''$/;"	v
inpe	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^inpe      = ''$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^fdr_cut	  = 1e-6 $/;"	v
outp	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^outp      = ''$/;"	v
region_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^region_cut	  = 1000000$/;"	v
chroms	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^chroms	  = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))$/;"	v
fdr_cut	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^fdr_cut = float(fdr_cut)$/;"	v
outlog	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^outlogf	  = open(outlog,'w')$/;"	v
chrom2Num	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def num2Chrom(num):$/;"	f
isInRange	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def isInRange(x,y,cut):$/;"	f
rUTest	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def rUTest(x,y):$/;"	f
kwTest	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def kwTest(xlist,ylist):$/;"	f
pAdj	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def pAdj(plist,type):$/;"	f
binarySearch	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^def binarySearch(chromPosArray, pos):$/;"	f
allChroms	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^allChroms = map(str,range(24)) + ['X','Y','x','y']$/;"	v
chromArray	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^chromArray = [[] for _ in range(24)] ##sort chrom pos information$/;"	v
genePosDict	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^genePosDict  = {} ## stor chrom_pos genename, values mapping information$/;"	v
i	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^i = 0$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpef.readline()  $/;"	v
headerExp	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  headerExp = line.strip().split("\\t",4)[4]$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpef.readline()$/;"	v
i	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    i = i + 1$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    line = inpef.readline()$/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      chrom = chrom2Num(chrom)$/;"	v
pos	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      pos = int(pos)$/;"	v
gene	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      gene = Gene(identifier, chrom, pos, strand, val)$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^chromDict = [{} for _ in range(24)]$/;"	v
pvalArray	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^pvalArray = []$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^snpdataDict      = {}$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^cnt_out          = 0$/;"	v
snpNameSet	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^snpNameSet = set()$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
headerSnp	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  headerSnp = line.strip().split("\\t",4)[4]$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    line = inpsf.readline()$/;"	v
snpdataDict	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^snpdataDict = dict()$/;"	v
cnt_snp	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^cnt_snp = 0 $/;"	v
cnt_p	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^cnt_p = 0$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^  line = inpsf.readline()$/;"	v
line	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    line = inpsf.readline()$/;"	v
snpdata	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    snpdata = Gene(snpname, chrom, pos, strand, val)$/;"	v
cnt_snp	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^    cnt_snp = cnt_snp + 1 $/;"	v
chrom	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      tempEnd = int(pos) + region_cut$/;"	v
index	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^      index = binarySearch(chromArray[chrom], tempStart)$/;"	v
expgene	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^        expgene = chromArray[chrom][index]$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          cnt_out = cnt_out + 1$/;"	v
snpval	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          snpval = map(int, val.split("\\t"))$/;"	v
expval	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          expval = map(float,expgene.val.split("\\t"))$/;"	v
genename	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          genename = expgene.name$/;"	v
cnt_p	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          cnt_p = cnt_p + 1$/;"	v
index	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^          index = index + 1$/;"	v
expgene	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^            expgene = chromArray[chrom][index]$/;"	v
outpf	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^outpf	= open(outp + ".adjPass_" + str(fdr_cut) + ".mat",'w')$/;"	v
outpsnpf	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^outpsnpf= open(outp + ".adj.snp",'w')$/;"	v
p_old	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^p_old	= [row[3] for row in pvalArray]$/;"	v
p_new	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^p_new	= pAdj(p_old,'b')$/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^cnt_out = 0 $/;"	v
cnt_out	projFocus/ceRNA/filterSNP_utest_KWtest_v3.py	/^        cnt_out = cnt_out + 1$/;"	v
os	projFocus/ceRNA/mergeExpCNV.py	/^import os$/;"	i
sys	projFocus/ceRNA/mergeExpCNV.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/mergeExpCNV.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/mergeExpCNV.py	/^argv = sys.argv[1:]$/;"	v
inpc	projFocus/ceRNA/mergeExpCNV.py	/^    inpc = arg$/;"	v
inpg	projFocus/ceRNA/mergeExpCNV.py	/^    inpg = arg$/;"	v
out	projFocus/ceRNA/mergeExpCNV.py	/^    out = arg$/;"	v
outlog	projFocus/ceRNA/mergeExpCNV.py	/^    outlog = out + ".log"$/;"	v
outlogf	projFocus/ceRNA/mergeExpCNV.py	/^outlogf = open(outlog,'w')$/;"	v
region_cut	projFocus/ceRNA/mergeExpCNV.py	/^region_cut = 1000000 # 1M$/;"	v
amp_cut	projFocus/ceRNA/mergeExpCNV.py	/^amp_cut	   = float(0.3)$/;"	v
del_cut	projFocus/ceRNA/mergeExpCNV.py	/^del_cut	   = float(-0.3)$/;"	v
nesp	projFocus/ceRNA/mergeExpCNV.py	/^nesp	   = 1$/;"	v
nval	projFocus/ceRNA/mergeExpCNV.py	/^nval	   = 5 - 1$/;"	v
chrom2Num	projFocus/ceRNA/mergeExpCNV.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/mergeExpCNV.py	/^def num2Chrom(num):$/;"	f
fnArray	projFocus/ceRNA/mergeExpCNV.py	/^fnArray = []$/;"	v
nCNVSamples	projFocus/ceRNA/mergeExpCNV.py	/^nCNVSamples = len(fnArray)$/;"	v
allChroms	projFocus/ceRNA/mergeExpCNV.py	/^allChroms = map(str,range(22)) + ['X','Y']$/;"	v
chromArray	projFocus/ceRNA/mergeExpCNV.py	/^chromArray = [[] for _ in range(24)]$/;"	v
genePosDict	projFocus/ceRNA/mergeExpCNV.py	/^genePosDict  = {}$/;"	v
headerExp	projFocus/ceRNA/mergeExpCNV.py	/^      headerExp = line.strip()$/;"	v
chrom	projFocus/ceRNA/mergeExpCNV.py	/^	chrom = chrom2Num(chrom)$/;"	v
idfile	projFocus/ceRNA/mergeExpCNV.py	/^idfile = -1$/;"	v
chromDict	projFocus/ceRNA/mergeExpCNV.py	/^chromDict = [{} for _ in range(24)]$/;"	v
fntempf	projFocus/ceRNA/mergeExpCNV.py	/^    fntempf = open(fn)$/;"	v
idfile	projFocus/ceRNA/mergeExpCNV.py	/^    idfile = idfile + 1$/;"	v
chrom	projFocus/ceRNA/mergeExpCNV.py	/^	     chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/mergeExpCNV.py	/^             tempStart = int(pStart) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/mergeExpCNV.py	/^             tempEnd = int(pEnd) + region_cut$/;"	v
cnt_out	projFocus/ceRNA/mergeExpCNV.py	/^cnt_out = 0 $/;"	v
myCol	projFocus/ceRNA/mergeExpCNV.py	/^def myCol(matrix,i):$/;"	f
outf	projFocus/ceRNA/mergeExpCNV.py	/^outf = open(out,'w')$/;"	v
printSysTime	projFocus/ceRNA/indelCall.sh	/^printSysTime() {$/;"	f
os	projFocus/ceRNA/make_Mat_cnv_level3.py	/^import os$/;"	i
sys	projFocus/ceRNA/make_Mat_cnv_level3.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/make_Mat_cnv_level3.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/make_Mat_cnv_level3.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/make_Mat_cnv_level3.py	/^    inp = arg$/;"	v
out	projFocus/ceRNA/make_Mat_cnv_level3.py	/^    out = arg$/;"	v
outlog	projFocus/ceRNA/make_Mat_cnv_level3.py	/^    outlog = out + ".log"$/;"	v
outlogf	projFocus/ceRNA/make_Mat_cnv_level3.py	/^outlogf = open(outlog,'w')$/;"	v
nesp	projFocus/ceRNA/make_Mat_cnv_level3.py	/^nesp = 1$/;"	v
nval	projFocus/ceRNA/make_Mat_cnv_level3.py	/^nval = 5 - 1$/;"	v
fnArray	projFocus/ceRNA/make_Mat_cnv_level3.py	/^fnArray = []$/;"	v
resDict	projFocus/ceRNA/make_Mat_cnv_level3.py	/^resDict = {}$/;"	v
idfile	projFocus/ceRNA/make_Mat_cnv_level3.py	/^idfile = -1$/;"	v
fntempf	projFocus/ceRNA/make_Mat_cnv_level3.py	/^   fntempf = open(fn)$/;"	v
idfile	projFocus/ceRNA/make_Mat_cnv_level3.py	/^   idfile = idfile + 1$/;"	v
key	projFocus/ceRNA/make_Mat_cnv_level3.py	/^       key = str(chr) + "_" + str(pstart) + "_" + str(pend) $/;"	v
val	projFocus/ceRNA/make_Mat_cnv_level3.py	/^       val = val + "_" + str(idfile)$/;"	v
mySplit_1	projFocus/ceRNA/make_Mat_cnv_level3.py	/^def mySplit_1(x):$/;"	f
mySplit_2	projFocus/ceRNA/make_Mat_cnv_level3.py	/^def mySplit_2(x):$/;"	f
outf	projFocus/ceRNA/make_Mat_cnv_level3.py	/^outf = open(out,'w')$/;"	v
cnt_out	projFocus/ceRNA/make_Mat_cnv_level3.py	/^cnt_out = 0 $/;"	v
os	projFocus/ceRNA/mergeExpSomMutation.py	/^import os$/;"	i
sys	projFocus/ceRNA/mergeExpSomMutation.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/mergeExpSomMutation.py	/^import sys, getopt$/;"	i
np	projFocus/ceRNA/mergeExpSomMutation.py	/^import numpy as np$/;"	i
pickle	projFocus/ceRNA/mergeExpSomMutation.py	/^import pickle$/;"	i
argv	projFocus/ceRNA/mergeExpSomMutation.py	/^argv = sys.argv[1:]$/;"	v
usage	projFocus/ceRNA/mergeExpSomMutation.py	/^usage = "usage: python mergeExpSomMutation.py  -s <file:full path of cnv level3 files,one each line> -e <file: gene_exp.mat> -o <filename: output file name>"$/;"	v
example	projFocus/ceRNA/mergeExpSomMutation.py	/^example = "python mergeExpSomMutation.py -s \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/data\/somaticMutation\/brca_som_selectedSample_level2.mat.5colanno -e \/ifs\/scratch\/c2b2\/ac_lab\/jh3283\/projFocus\/ceRNA\/result\/exp\/brca_exp_l3_731_DEG.mat.singleTSS.anno -o brca_somForDeg.mat  "$/;"	v
inpSomFile	projFocus/ceRNA/mergeExpSomMutation.py	/^    inpSomFile = arg$/;"	v
inpExpFile	projFocus/ceRNA/mergeExpSomMutation.py	/^    inpExpFile = arg$/;"	v
outFile	projFocus/ceRNA/mergeExpSomMutation.py	/^    outFile = arg$/;"	v
outlog	projFocus/ceRNA/mergeExpSomMutation.py	/^    outlog = outFile + ".log"$/;"	v
outlogf	projFocus/ceRNA/mergeExpSomMutation.py	/^outlogf = open(outlog,'w')$/;"	v
region_cut	projFocus/ceRNA/mergeExpSomMutation.py	/^region_cut = 1000000 # 1M$/;"	v
chrom2Num	projFocus/ceRNA/mergeExpSomMutation.py	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/mergeExpSomMutation.py	/^def num2Chrom(num):$/;"	f
allChroms	projFocus/ceRNA/mergeExpSomMutation.py	/^allChroms = map(str,range(22)) + ['X','Y']$/;"	v
chromArray	projFocus/ceRNA/mergeExpSomMutation.py	/^chromArray = [[] for _ in range(24)] #keep all position for each chrom$/;"	v
genePosDict	projFocus/ceRNA/mergeExpSomMutation.py	/^genePosDict  = {} #keep all chr, pos identifier information$/;"	v
headerExp	projFocus/ceRNA/mergeExpSomMutation.py	/^      headerExp = line.strip()$/;"	v
chrom	projFocus/ceRNA/mergeExpSomMutation.py	/^	chrom = chrom2Num(chrom)$/;"	v
chromDict	projFocus/ceRNA/mergeExpSomMutation.py	/^chromDict = [{} for _ in range(24)]$/;"	v
expSomLink	projFocus/ceRNA/mergeExpSomMutation.py	/^expSomLink = []$/;"	v
outFileHandler	projFocus/ceRNA/mergeExpSomMutation.py	/^outFileHandler = open(outFile,'w')$/;"	v
chrom	projFocus/ceRNA/mergeExpSomMutation.py	/^          chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/mergeExpSomMutation.py	/^          tempStart = int(start) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/mergeExpSomMutation.py	/^          tempEnd = int(end) + region_cut$/;"	v
expGene	projFocus/ceRNA/mergeExpSomMutation.py	/^	      expGene = genePosDict[(chrom,str(p))]$/;"	v
cntGene	projFocus/ceRNA/mergeExpSomMutation.py	/^cntGene = 1$/;"	v
temp	projFocus/ceRNA/mergeExpSomMutation.py	/^  temp = [map(int,row[2].split("\\t")) for row in expSomLink if row[0] == expGene] $/;"	v
tempNP	projFocus/ceRNA/mergeExpSomMutation.py	/^    tempNP = np.array(temp)$/;"	v
sumTempNP	projFocus/ceRNA/mergeExpSomMutation.py	/^    sumTempNP = np.sum(tempNP,0)$/;"	v
cntGene	projFocus/ceRNA/mergeExpSomMutation.py	/^    cntGene = cntGene + 1$/;"	v
os	projFocus/ceRNA/makeMatRnaseql3.py	/^import os$/;"	i
linecache	projFocus/ceRNA/makeMatRnaseql3.py	/^import linecache$/;"	i
sys	projFocus/ceRNA/makeMatRnaseql3.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/makeMatRnaseql3.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/makeMatRnaseql3.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/makeMatRnaseql3.py	/^inp = ''$/;"	v
outp	projFocus/ceRNA/makeMatRnaseql3.py	/^outp = ''$/;"	v
inp	projFocus/ceRNA/makeMatRnaseql3.py	/^     inp = arg$/;"	v
outp	projFocus/ceRNA/makeMatRnaseql3.py	/^     outp = arg$/;"	v
outlog	projFocus/ceRNA/makeMatRnaseql3.py	/^     outlog = outp + ".log"$/;"	v
sysTime	projFocus/ceRNA/makeMatRnaseql3.py	/^def sysTime(fdlog):$/;"	f
file_len	projFocus/ceRNA/makeMatRnaseql3.py	/^def file_len(fname):$/;"	f
cntCol	projFocus/ceRNA/makeMatRnaseql3.py	/^cntCol = file_len(inp)$/;"	v
fout	projFocus/ceRNA/makeMatRnaseql3.py	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/makeMatRnaseql3.py	/^  allsamples = [" "] * (cntCol + 1)$/;"	v
line_crt	projFocus/ceRNA/makeMatRnaseql3.py	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/makeMatRnaseql3.py	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/makeMatRnaseql3.py	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/makeMatRnaseql3.py	/^a=[open(i,'r',81920) for i in farray]$/;"	v
expt	projFocus/ceRNA/makeMatRnaseql3.py	/^	expt=[0] * cntCol$/;"	v
line	projFocus/ceRNA/makeMatRnaseql3.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMatRnaseql3.py	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/makeMatRnaseql3.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMatRnaseql3.py	/^			ncol = ncol + 1$/;"	v
keynew	projFocus/ceRNA/makeMatRnaseql3.py	/^			keynew = key.split("|")[0]$/;"	v
fout2	projFocus/ceRNA/makeMatRnaseql3.py	/^fout2 = open(outlog,'w')$/;"	v
os	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^import os$/;"	i
sys	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^argv = sys.argv[1:]$/;"	v
inpc	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    inpc = arg$/;"	v
inpg	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    inpg = arg$/;"	v
inpm	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    inpm = arg$/;"	v
inps	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    inps = arg$/;"	v
out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    out = arg$/;"	v
outlog	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    outlog = out + ".log"$/;"	v
outlogf	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^outlogf = open(outlog,'w')$/;"	v
region_cut	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^region_cut = 1000000 # 1M$/;"	v
amp_cut	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^amp_cut = float(0.3)$/;"	v
del_cut	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^del_cut = float(-0.3)$/;"	v
nesp	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^nesp = 1$/;"	v
nval	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^nval = 5 - 1$/;"	v
chrom2Num	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^def chrom2Num(chrom):$/;"	f
num2Chrom	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^def num2Chrom(num):$/;"	f
fnArray	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^fnArray = []$/;"	v
nCNVSamples	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^nCNVSamples = len(fnArray)$/;"	v
allChroms	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^allChroms = map(str,range(22)) + ['X','Y']$/;"	v
chromArray	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^chromArray = [[] for _ in range(24)]$/;"	v
genePosDict	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^genePosDict  = {}$/;"	v
headerExp	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      headerExp = line.strip()$/;"	v
chrom	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^	chrom = chrom2Num(chrom)$/;"	v
idfile	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^idfile = -1$/;"	v
chromDict	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^chromDict = [{} for _ in range(24)]$/;"	v
fntempf	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    fntempf = open(fn)$/;"	v
idfile	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^    idfile = idfile + 1$/;"	v
chrom	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^	     chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^             tempStart = int(pStart) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^             tempEnd = int(pEnd) + region_cut$/;"	v
cnt_out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^cnt_out = 0 $/;"	v
myCol	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^def myCol(matrix,i):$/;"	f
outf	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^outf = open(out,'w')$/;"	v
cnt_out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^chromDict = [{} for _ in range(24)]$/;"	v
headerSnp	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      headerSnp = line.strip()$/;"	v
chrom	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^        chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^        tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^        tempEnd = int(pos) + region_cut$/;"	v
chromID	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^  chromID = num2Chrom(idx) $/;"	v
cnt_out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      cnt_out = cnt_out + 1$/;"	v
cnt_out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^cnt_out = 0 $/;"	v
chromDict	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^chromDict = [{} for _ in range(24)]$/;"	v
headerMeth	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      headerMeth = line.strip()$/;"	v
chrom	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      chrom = chrom2Num(chrom)$/;"	v
tempStart	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      tempStart = int(pos) - region_cut$/;"	v
tempEnd	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      tempEnd = int(pos) + region_cut$/;"	v
chromID	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^  chromID = num2Chrom(idx) $/;"	v
cnt_out	projFocus/ceRNA/merge_snp_meth_cnvl3_v1.py.bak	/^      cnt_out = cnt_out + 1 $/;"	v
os	projFocus/ceRNA/makeMat_SNP_v1.py	/^import os$/;"	i
math	projFocus/ceRNA/makeMat_SNP_v1.py	/^import math$/;"	i
linecache	projFocus/ceRNA/makeMat_SNP_v1.py	/^import linecache$/;"	i
sys	projFocus/ceRNA/makeMat_SNP_v1.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/makeMat_SNP_v1.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/makeMat_SNP_v1.py	/^argv = sys.argv[1:]$/;"	v
inp	projFocus/ceRNA/makeMat_SNP_v1.py	/^inp = ''$/;"	v
outp	projFocus/ceRNA/makeMat_SNP_v1.py	/^outp = ''$/;"	v
inp	projFocus/ceRNA/makeMat_SNP_v1.py	/^    inp = arg$/;"	v
outp	projFocus/ceRNA/makeMat_SNP_v1.py	/^    outp = arg$/;"	v
outpstat	projFocus/ceRNA/makeMat_SNP_v1.py	/^    outpstat = outp + "_stat"$/;"	v
conf_cut	projFocus/ceRNA/makeMat_SNP_v1.py	/^conf_cut = 0.1$/;"	v
maf_cut	projFocus/ceRNA/makeMat_SNP_v1.py	/^maf_cut = 0.05$/;"	v
fisher_cut	projFocus/ceRNA/makeMat_SNP_v1.py	/^fisher_cut =  10**(-8)$/;"	v
file_len	projFocus/ceRNA/makeMat_SNP_v1.py	/^def file_len(fname):$/;"	f
sysTime	projFocus/ceRNA/makeMat_SNP_v1.py	/^def sysTime():$/;"	f
get_nth_line	projFocus/ceRNA/makeMat_SNP_v1.py	/^def get_nth_line(f,n):$/;"	f
nsample	projFocus/ceRNA/makeMat_SNP_v1.py	/^nsample = file_len(inp)$/;"	v
sampleSize_cut	projFocus/ceRNA/makeMat_SNP_v1.py	/^sampleSize_cut = int(0.1 * nsample) $/;"	v
line_crt	projFocus/ceRNA/makeMat_SNP_v1.py	/^				line_crt = line.strip()$/;"	v
nsnp	projFocus/ceRNA/makeMat_SNP_v1.py	/^				nsnp = file_len(line_crt)$/;"	v
outp	projFocus/ceRNA/makeMat_SNP_v1.py	/^outp = outp +"_" + str(nsample) + ".mat"$/;"	v
outpstat	projFocus/ceRNA/makeMat_SNP_v1.py	/^outpstat = outpstat +"_" +  str(nsample) + ".txt"$/;"	v
get_MAF	projFocus/ceRNA/makeMat_SNP_v1.py	/^def get_MAF(gtlist):$/;"	f
logfac	projFocus/ceRNA/makeMat_SNP_v1.py	/^def logfac(n):$/;"	f
fisherTest	projFocus/ceRNA/makeMat_SNP_v1.py	/^def fisherTest(gtlist):$/;"	f
cnt_f1	projFocus/ceRNA/makeMat_SNP_v1.py	/^cnt_f1 = 0$/;"	v
cnt_f2	projFocus/ceRNA/makeMat_SNP_v1.py	/^cnt_f2 = 0$/;"	v
cnt_f3	projFocus/ceRNA/makeMat_SNP_v1.py	/^cnt_f3 = 0$/;"	v
fout	projFocus/ceRNA/makeMat_SNP_v1.py	/^fout = open(outp,'w')$/;"	v
allsamples	projFocus/ceRNA/makeMat_SNP_v1.py	/^  allsamples = [" "] * nsample$/;"	v
line_crt	projFocus/ceRNA/makeMat_SNP_v1.py	/^  	line_crt = line.strip()$/;"	v
farray	projFocus/ceRNA/makeMat_SNP_v1.py	/^farray=[]$/;"	v
line_crt	projFocus/ceRNA/makeMat_SNP_v1.py	/^		line_crt = line.strip()$/;"	v
a	projFocus/ceRNA/makeMat_SNP_v1.py	/^a=[open(i,'r',81920) for i in farray]$/;"	v
gt	projFocus/ceRNA/makeMat_SNP_v1.py	/^	gt = [0] * nsample$/;"	v
conf	projFocus/ceRNA/makeMat_SNP_v1.py	/^	conf = [0] * nsample$/;"	v
line	projFocus/ceRNA/makeMat_SNP_v1.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMat_SNP_v1.py	/^		ncol = 0$/;"	v
line	projFocus/ceRNA/makeMat_SNP_v1.py	/^			line = f.next()$/;"	v
ncol	projFocus/ceRNA/makeMat_SNP_v1.py	/^			ncol = ncol + 1$/;"	v
samples	projFocus/ceRNA/makeMat_SNP_v1.py	/^		samples=allsamples $/;"	v
allgt	projFocus/ceRNA/makeMat_SNP_v1.py	/^		allgt = gt		$/;"	v
temp	projFocus/ceRNA/makeMat_SNP_v1.py	/^		temp = [j for j in range(len(conf)) if(conf[j] < conf_cut)]$/;"	v
maf	projFocus/ceRNA/makeMat_SNP_v1.py	/^		   	maf = get_MAF(gt)$/;"	v
ftest	projFocus/ceRNA/makeMat_SNP_v1.py	/^				ftest = fisherTest(gt)$/;"	v
cnt_f3	projFocus/ceRNA/makeMat_SNP_v1.py	/^					cnt_f3 = cnt_f3 + 1$/;"	v
cnt_f2	projFocus/ceRNA/makeMat_SNP_v1.py	/^				cnt_f2 = cnt_f2 + 1$/;"	v
cnt_f1	projFocus/ceRNA/makeMat_SNP_v1.py	/^			cnt_f1 = cnt_f1 + 1$/;"	v
fout2	projFocus/ceRNA/makeMat_SNP_v1.py	/^fout2 = open(outpstat,'w')$/;"	v
os	projFocus/ceRNA/annotSomMutation.py	/^import os$/;"	i
sys	projFocus/ceRNA/annotSomMutation.py	/^import sys, getopt$/;"	i
getopt	projFocus/ceRNA/annotSomMutation.py	/^import sys, getopt$/;"	i
argv	projFocus/ceRNA/annotSomMutation.py	/^argv = sys.argv[1:]$/;"	v
inp1	projFocus/ceRNA/annotSomMutation.py	/^inp1 = ''$/;"	v
inp2	projFocus/ceRNA/annotSomMutation.py	/^inp2 = ''$/;"	v
outp	projFocus/ceRNA/annotSomMutation.py	/^outp = ''$/;"	v
usage	projFocus/ceRNA/annotSomMutation.py	/^usage = 'python annot_SNP.py -i <inputfile> -d <snp annotation file> -o <output file name>' $/;"	v
inp1	projFocus/ceRNA/annotSomMutation.py	/^    inp1 = arg$/;"	v
inp2	projFocus/ceRNA/annotSomMutation.py	/^    inp2 = arg$/;"	v
outp	projFocus/ceRNA/annotSomMutation.py	/^    outp = arg$/;"	v
outlog	projFocus/ceRNA/annotSomMutation.py	/^    outlog = outp + ".log"$/;"	v
outlogf	projFocus/ceRNA/annotSomMutation.py	/^outlogf = open(outlog,"w")$/;"	v
outpf	projFocus/ceRNA/annotSomMutation.py	/^outpf = open(outp,"w")$/;"	v
inp1Dict	projFocus/ceRNA/annotSomMutation.py	/^inp1Dict = {}$/;"	v
outHeader1	projFocus/ceRNA/annotSomMutation.py	/^      outHeader1 = line.split("\\t",1)[1]$/;"	v
cnt_out	projFocus/ceRNA/annotSomMutation.py	/^cnt_out = 0$/;"	v
outKey	projFocus/ceRNA/annotSomMutation.py	/^outKey = []$/;"	v
outHeader2	projFocus/ceRNA/annotSomMutation.py	/^      outHeader2 = line.strip()$/;"	v
cnt_out	projFocus/ceRNA/annotSomMutation.py	/^	cnt_out = cnt_out + 1$/;"	v
re	projNET/generateFreq/BAFpipeline/geneutils.py	/^import re$/;"	i
pickle	projNET/generateFreq/BAFpipeline/geneutils.py	/^import pickle$/;"	i
itemgetter	projNET/generateFreq/BAFpipeline/geneutils.py	/^from operator import itemgetter$/;"	i
sys	projNET/generateFreq/BAFpipeline/geneutils.py	/^import sys$/;"	i
subprocess	projNET/generateFreq/BAFpipeline/geneutils.py	/^import subprocess$/;"	i
os	projNET/generateFreq/BAFpipeline/geneutils.py	/^import os$/;"	i
string	projNET/generateFreq/BAFpipeline/geneutils.py	/^import string$/;"	i
time	projNET/generateFreq/BAFpipeline/geneutils.py	/^import time$/;"	i
shutil	projNET/generateFreq/BAFpipeline/geneutils.py	/^import shutil$/;"	i
datetime	projNET/generateFreq/BAFpipeline/geneutils.py	/^import datetime$/;"	i
collections	projNET/generateFreq/BAFpipeline/geneutils.py	/^import collections$/;"	i
csv	projNET/generateFreq/BAFpipeline/geneutils.py	/^import csv$/;"	i
unittest	projNET/generateFreq/BAFpipeline/geneutils.py	/^import unittest$/;"	i
REF_PATH	projNET/generateFreq/BAFpipeline/geneutils.py	/^REF_PATH = '\/ifs\/data\/c2b2\/ngs_lab\/ngs\/resources\/bwa_samtools_gatk_DB\/human_g1k_v37.fasta'$/;"	v
GC_WINDOW_SIZE	projNET/generateFreq/BAFpipeline/geneutils.py	/^GC_WINDOW_SIZE = 213$/;"	v
getMeanAndVarianceOfD	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getMeanAndVarianceOfD(counts_d):$/;"	f
getWindowL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getWindowL(contig_exon_l, window_size):$/;"	f
getEquallySizedWindowsL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getEquallySizedWindowsL(contig_exons_l, window_size):$/;"	f
getGCPercentL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getGCPercentL(window_l):$/;"	f
getContigExonsL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getContigExonsL(exons_l, contig):$/;"	f
WindowReadCountdGenerator	projNET/generateFreq/BAFpipeline/geneutils.py	/^def WindowReadCountdGenerator(windows_l, bam_fn, with_chr_flag):$/;"	f
getMidpointD	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getMidpointD(window, bam_fn, with_chr_flag):$/;"	f
getMeanAndVariance	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getMeanAndVariance(counts_l):$/;"	f
getWindowLForExon	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getWindowLForExon(contig, startbase, endbase, window_size):$/;"	f
getExonL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getExonL(bedfile):$/;"	f
getAverageTemplateLength	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getAverageTemplateLength():$/;"	f
math	projNET/generateFreq/BAFpipeline/geneutils.py	/^    import math$/;"	i
getSequence	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getSequence(contig, startbase, endbase, contig_offset_d):$/;"	f
getContigLength_d	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getContigLength_d():$/;"	f
getContigOffsetD	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getContigOffsetD():$/;"	f
ContigWindowGenerator	projNET/generateFreq/BAFpipeline/geneutils.py	/^def ContigWindowGenerator(contig, window_size, margin, contig_length_d, start):$/;"	f
WindowGCcontentdGenerator	projNET/generateFreq/BAFpipeline/geneutils.py	/^def WindowGCcontentdGenerator(window_l, gc_window_size):$/;"	f
GCContentOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class GCContentOb(object):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, gc_window_size):$/;"	m	class:GCContentOb
getGCContentd	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getGCContentd(self, contig, startbase, endbase):$/;"	m	class:GCContentOb
MidpointdGenerator	projNET/generateFreq/BAFpipeline/geneutils.py	/^def MidpointdGenerator(number_lines_to_get, samorbam_fn, verbose = False, stream = False):$/;"	f
NaiveWindowReadCount	projNET/generateFreq/BAFpipeline/geneutils.py	/^def NaiveWindowReadCount(sam_fn, window):$/;"	f
countReadsInWindows	projNET/generateFreq/BAFpipeline/geneutils.py	/^def countReadsInWindows(window_l, sam_path):$/;"	f
deque	projNET/generateFreq/BAFpipeline/geneutils.py	/^    from collections import deque$/;"	i
generateSamFiles	projNET/generateFreq/BAFpipeline/geneutils.py	/^def generateSamFiles(bam_path, probe_bed_path, target_dir_path):$/;"	f
get_contig_s	projNET/generateFreq/BAFpipeline/geneutils.py	/^def get_contig_s(pos_list):$/;"	f
merge_pileups	projNET/generateFreq/BAFpipeline/geneutils.py	/^def merge_pileups(pileup_file_dir_path, merged_pileup_path):$/;"	f
make_dirs	projNET/generateFreq/BAFpipeline/geneutils.py	/^def make_dirs(path_l):$/;"	f
getTimeStamp	projNET/generateFreq/BAFpipeline/geneutils.py	/^def getTimeStamp():$/;"	f
appendListToFile	projNET/generateFreq/BAFpipeline/geneutils.py	/^def appendListToFile(l, path):$/;"	f
writeListToFile	projNET/generateFreq/BAFpipeline/geneutils.py	/^def writeListToFile(l, path):$/;"	f
convertToStringAndWriteListToFile	projNET/generateFreq/BAFpipeline/geneutils.py	/^def convertToStringAndWriteListToFile(l, path):$/;"	f
readListFromFile	projNET/generateFreq/BAFpipeline/geneutils.py	/^def readListFromFile(path, field_l):$/;"	f
writeBedFileFromRegionL	projNET/generateFreq/BAFpipeline/geneutils.py	/^def writeBedFileFromRegionL(exon_l, bed_path):$/;"	f
trigger_samfile_step	projNET/generateFreq/BAFpipeline/geneutils.py	/^def trigger_samfile_step(bed_job_info_ob, contig, sample_name, bam_file_path):$/;"	f
submit_qsub_job	projNET/generateFreq/BAFpipeline/geneutils.py	/^                    qsub_output_path, mem='2G', time=15):$/;"	f
triggerSamfile	projNET/generateFreq/BAFpipeline/geneutils.py	/^def triggerSamfile(bam_path, bed_path, sam_path, contig):$/;"	f
trigger_pileups	projNET/generateFreq/BAFpipeline/geneutils.py	/^def trigger_pileups(bed_dir, bam_path_model, out_dir):$/;"	f
GeneFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class GeneFileOb(object):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:GeneFileOb
__len__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __len__(self):$/;"	m	class:GeneFileOb	file:
get_all_lines_l	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def get_all_lines_l(self):$/;"	m	class:GeneFileOb
get_line_d	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def get_line_d(self):$/;"	m	class:GeneFileOb
__iter__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __iter__(self):$/;"	m	class:GeneFileOb	file:
memoryLineIter	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def memoryLineIter(self):$/;"	m	class:GeneFileOb
diskLineIter	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def diskLineIter(self):$/;"	m	class:GeneFileOb
memoryGetItem	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def memoryGetItem(self, key):$/;"	m	class:GeneFileOb
diskGetItem	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def diskGetItem(self, key):$/;"	m	class:GeneFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:GeneFileOb	file:
getContigPosD	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getContigPosD(self):$/;"	m	class:GeneFileOb
GeneLineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class GeneLineOb(object):$/;"	c
VCFLineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class VCFLineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:VCFLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:VCFLineOb
getNormalGenotype	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getNormalGenotype(self):$/;"	m	class:VCFLineOb
getTumorGenotype	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getTumorGenotype(self):$/;"	m	class:VCFLineOb
getAltNucleotide	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getAltNucleotide(self):$/;"	m	class:VCFLineOb
isCoding	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def isCoding(self):$/;"	m	class:VCFLineOb
isIndel	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def isIndel(self):$/;"	m	class:VCFLineOb
VCFFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class VCFFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:VCFFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:VCFFileOb	file:
PILEUPLineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class PILEUPLineOb(GeneLineOb):$/;"	c
indel_regex	projNET/generateFreq/BAFpipeline/geneutils.py	/^    indel_regex = re.compile(r"(-|\\+)\\d+")$/;"	v	class:PILEUPLineOb
startread_regex	projNET/generateFreq/BAFpipeline/geneutils.py	/^    startread_regex = re.compile(r"\\^\\S")$/;"	v	class:PILEUPLineOb
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:PILEUPLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:PILEUPLineOb
getReadCount	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getReadCount(self):$/;"	m	class:PILEUPLineOb
getNucleotideCount	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getNucleotideCount(self, nucleotide_char):$/;"	m	class:PILEUPLineOb
getAltNucleotideCount	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getAltNucleotideCount(self):$/;"	m	class:PILEUPLineOb
PILEUPFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class PILEUPFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:PILEUPFileOb
BEDLineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class BEDLineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:BEDLineOb
getStartPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getStartPos_t(self):$/;"	m	class:BEDLineOb
getEndPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getEndPos_t(self):$/;"	m	class:BEDLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:BEDLineOb
BEDFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class BEDFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:BEDFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:BEDFileOb	file:
SAMLineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class SAMLineOb(GeneLineOb):$/;"	c
CIGAR_regex	projNET/generateFreq/BAFpipeline/geneutils.py	/^    CIGAR_regex = re.compile(r"M|I|D|N|S|H|P|=|X")$/;"	v	class:SAMLineOb
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:SAMLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:SAMLineOb
getTemplateLength	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getTemplateLength(self):$/;"	m	class:SAMLineOb
getCIGARString	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getCIGARString(self):$/;"	m	class:SAMLineOb
getCIGARCount	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getCIGARCount(self):$/;"	m	class:SAMLineOb
isUnmapped	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def isUnmapped(self):$/;"	m	class:SAMLineOb
isFirstRead	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def isFirstRead(self):$/;"	m	class:SAMLineOb
getTemplateName	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getTemplateName(self):$/;"	m	class:SAMLineOb
getMidpoint	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getMidpoint(self):$/;"	m	class:SAMLineOb
getPosNext	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPosNext(self):$/;"	m	class:SAMLineOb
SAMFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class SAMFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:SAMFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:SAMFileOb	file:
FAILineOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class FAILineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:FAILineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:FAILineOb
getOffset	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getOffset(self):$/;"	m	class:FAILineOb
getContig	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getContig(self):$/;"	m	class:FAILineOb
getLength	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def getLength(self):$/;"	m	class:FAILineOb
isNumeric	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def isNumeric(self):$/;"	m	class:FAILineOb
FAIFileOb	projNET/generateFreq/BAFpipeline/geneutils.py	/^class FAIFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:FAIFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:FAIFileOb	file:
unpickle	projNET/generateFreq/BAFpipeline/geneutils.py	/^def unpickle(pickle_fn):$/;"	f
MidpointAfterStart	projNET/generateFreq/BAFpipeline/geneutils.py	/^class MidpointAfterStart(unittest.TestCase):$/;"	c
test	projNET/generateFreq/BAFpipeline/geneutils.py	/^    def test(self):$/;"	m	class:MidpointAfterStart
die	projNET/generateFreq/BAFpipeline/BAFPLOT.sh	/^die () {$/;"	f
die	projNET/generateFreq/BAFpipeline/pileup_to_freq.sh	/^die () {$/;"	f
geneutils	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^import geneutils$/;"	i
OptionParser	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^from optparse import OptionParser$/;"	i
MakeFreq	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^def MakeFreq(pileup_file, output_file):$/;"	f
parser	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^  parser = OptionParser()$/;"	v
pileup_file	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^  pileup_file = args[0]$/;"	v
output_file	projNET/generateFreq/BAFpipeline/pileup_to_freq.py	/^  output_file = args[1]  $/;"	v
re	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import re$/;"	i
pickle	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import pickle$/;"	i
itemgetter	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^from operator import itemgetter$/;"	i
sys	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import sys$/;"	i
subprocess	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import subprocess$/;"	i
os	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import os$/;"	i
string	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import string$/;"	i
time	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import time$/;"	i
shutil	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import shutil$/;"	i
datetime	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import datetime$/;"	i
collections	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import collections$/;"	i
csv	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import csv$/;"	i
unittest	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^import unittest$/;"	i
REF_PATH	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^REF_PATH = '\/ifs\/data\/c2b2\/ngs_lab\/ngs\/resources\/bwa_samtools_gatk_DB\/human_g1k_v37.fasta'$/;"	v
GC_WINDOW_SIZE	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^GC_WINDOW_SIZE = 213$/;"	v
getMeanAndVarianceOfD	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getMeanAndVarianceOfD(counts_d):$/;"	f
getWindowL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getWindowL(contig_exon_l, window_size):$/;"	f
getEquallySizedWindowsL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getEquallySizedWindowsL(contig_exons_l, window_size):$/;"	f
getGCPercentL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getGCPercentL(window_l):$/;"	f
getContigExonsL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getContigExonsL(exons_l, contig):$/;"	f
WindowReadCountdGenerator	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def WindowReadCountdGenerator(windows_l, bam_fn, with_chr_flag):$/;"	f
getMidpointD	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getMidpointD(window, bam_fn, with_chr_flag):$/;"	f
getMeanAndVariance	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getMeanAndVariance(counts_l):$/;"	f
getWindowLForExon	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getWindowLForExon(contig, startbase, endbase, window_size):$/;"	f
getExonL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getExonL(bedfile):$/;"	f
getAverageTemplateLength	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getAverageTemplateLength():$/;"	f
math	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    import math$/;"	i
getSequence	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getSequence(contig, startbase, endbase, contig_offset_d):$/;"	f
getContigLength_d	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getContigLength_d():$/;"	f
getContigOffsetD	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getContigOffsetD():$/;"	f
ContigWindowGenerator	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def ContigWindowGenerator(contig, window_size, margin, contig_length_d, start):$/;"	f
WindowGCcontentdGenerator	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def WindowGCcontentdGenerator(window_l, gc_window_size):$/;"	f
GCContentOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class GCContentOb(object):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, gc_window_size):$/;"	m	class:GCContentOb
getGCContentd	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getGCContentd(self, contig, startbase, endbase):$/;"	m	class:GCContentOb
MidpointdGenerator	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def MidpointdGenerator(number_lines_to_get, samorbam_fn, verbose = False, stream = False):$/;"	f
NaiveWindowReadCount	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def NaiveWindowReadCount(sam_fn, window):$/;"	f
countReadsInWindows	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def countReadsInWindows(window_l, sam_path):$/;"	f
deque	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    from collections import deque$/;"	i
generateSamFiles	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def generateSamFiles(bam_path, probe_bed_path, target_dir_path):$/;"	f
get_contig_s	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def get_contig_s(pos_list):$/;"	f
merge_pileups	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def merge_pileups(pileup_file_dir_path, merged_pileup_path):$/;"	f
make_dirs	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def make_dirs(path_l):$/;"	f
getTimeStamp	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def getTimeStamp():$/;"	f
appendListToFile	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def appendListToFile(l, path):$/;"	f
writeListToFile	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def writeListToFile(l, path):$/;"	f
convertToStringAndWriteListToFile	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def convertToStringAndWriteListToFile(l, path):$/;"	f
readListFromFile	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def readListFromFile(path, field_l):$/;"	f
writeBedFileFromRegionL	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def writeBedFileFromRegionL(exon_l, bed_path):$/;"	f
trigger_samfile_step	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def trigger_samfile_step(bed_job_info_ob, contig, sample_name, bam_file_path):$/;"	f
submit_qsub_job	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                    qsub_output_path, mem='2G', time=15):$/;"	f
triggerSamfile	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def triggerSamfile(bam_path, bed_path, sam_path, contig):$/;"	f
trigger_pileups	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def trigger_pileups(bed_dir, bam_path_model, out_dir):$/;"	f
GeneFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class GeneFileOb(object):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:GeneFileOb
__len__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __len__(self):$/;"	m	class:GeneFileOb	file:
get_all_lines_l	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def get_all_lines_l(self):$/;"	m	class:GeneFileOb
get_line_d	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def get_line_d(self):$/;"	m	class:GeneFileOb
__iter__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __iter__(self):$/;"	m	class:GeneFileOb	file:
memoryLineIter	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def memoryLineIter(self):$/;"	m	class:GeneFileOb
diskLineIter	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def diskLineIter(self):$/;"	m	class:GeneFileOb
memoryGetItem	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def memoryGetItem(self, key):$/;"	m	class:GeneFileOb
diskGetItem	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def diskGetItem(self, key):$/;"	m	class:GeneFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:GeneFileOb	file:
getContigPosD	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getContigPosD(self):$/;"	m	class:GeneFileOb
GeneLineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class GeneLineOb(object):$/;"	c
VCFLineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class VCFLineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:VCFLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:VCFLineOb
getNormalGenotype	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getNormalGenotype(self):$/;"	m	class:VCFLineOb
getTumorGenotype	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getTumorGenotype(self):$/;"	m	class:VCFLineOb
getAltNucleotide	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getAltNucleotide(self):$/;"	m	class:VCFLineOb
isCoding	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def isCoding(self):$/;"	m	class:VCFLineOb
isIndel	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def isIndel(self):$/;"	m	class:VCFLineOb
VCFFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class VCFFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:VCFFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:VCFFileOb	file:
PILEUPLineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class PILEUPLineOb(GeneLineOb):$/;"	c
indel_regex	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    indel_regex = re.compile(r"(-|\\+)\\d+")$/;"	v	class:PILEUPLineOb
startread_regex	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    startread_regex = re.compile(r"\\^\\S")$/;"	v	class:PILEUPLineOb
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:PILEUPLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:PILEUPLineOb
getReadCount	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getReadCount(self):$/;"	m	class:PILEUPLineOb
getNucleotideCount	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getNucleotideCount(self, nucleotide_char):$/;"	m	class:PILEUPLineOb
getAltNucleotideCount	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getAltNucleotideCount(self):$/;"	m	class:PILEUPLineOb
PILEUPFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class PILEUPFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:PILEUPFileOb
BEDLineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class BEDLineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:BEDLineOb
getStartPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getStartPos_t(self):$/;"	m	class:BEDLineOb
getEndPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getEndPos_t(self):$/;"	m	class:BEDLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:BEDLineOb
BEDFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class BEDFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:BEDFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:BEDFileOb	file:
SAMLineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class SAMLineOb(GeneLineOb):$/;"	c
CIGAR_regex	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    CIGAR_regex = re.compile(r"M|I|D|N|S|H|P|=|X")$/;"	v	class:SAMLineOb
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:SAMLineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:SAMLineOb
getTemplateLength	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getTemplateLength(self):$/;"	m	class:SAMLineOb
getCIGARString	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getCIGARString(self):$/;"	m	class:SAMLineOb
getCIGARCount	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getCIGARCount(self):$/;"	m	class:SAMLineOb
isUnmapped	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def isUnmapped(self):$/;"	m	class:SAMLineOb
isFirstRead	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def isFirstRead(self):$/;"	m	class:SAMLineOb
getTemplateName	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getTemplateName(self):$/;"	m	class:SAMLineOb
getMidpoint	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getMidpoint(self):$/;"	m	class:SAMLineOb
getPosNext	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPosNext(self):$/;"	m	class:SAMLineOb
SAMFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class SAMFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:SAMFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:SAMFileOb	file:
FAILineOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class FAILineOb(GeneLineOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:FAILineOb
getPos_t	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:FAILineOb
getOffset	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getOffset(self):$/;"	m	class:FAILineOb
getContig	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getContig(self):$/;"	m	class:FAILineOb
getLength	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def getLength(self):$/;"	m	class:FAILineOb
isNumeric	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def isNumeric(self):$/;"	m	class:FAILineOb
FAIFileOb	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class FAIFileOb(GeneFileOb):$/;"	c
__init__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:FAIFileOb
__getitem__	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:FAIFileOb	file:
unpickle	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^def unpickle(pickle_fn):$/;"	f
MidpointAfterStart	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^class MidpointAfterStart(unittest.TestCase):$/;"	c
test	projNET/generateFreq/BAFpipeline/geneutils-1.py	/^    def test(self):$/;"	m	class:MidpointAfterStart
die	projNET/generateFreq/BAFpipeline/bed_to_pileup.sh	/^die () {$/;"	f
re	projNET/BAFpipeline/geneutils.py	/^import re$/;"	i
pickle	projNET/BAFpipeline/geneutils.py	/^import pickle$/;"	i
itemgetter	projNET/BAFpipeline/geneutils.py	/^from operator import itemgetter$/;"	i
sys	projNET/BAFpipeline/geneutils.py	/^import sys$/;"	i
subprocess	projNET/BAFpipeline/geneutils.py	/^import subprocess$/;"	i
os	projNET/BAFpipeline/geneutils.py	/^import os$/;"	i
string	projNET/BAFpipeline/geneutils.py	/^import string$/;"	i
time	projNET/BAFpipeline/geneutils.py	/^import time$/;"	i
shutil	projNET/BAFpipeline/geneutils.py	/^import shutil$/;"	i
datetime	projNET/BAFpipeline/geneutils.py	/^import datetime$/;"	i
collections	projNET/BAFpipeline/geneutils.py	/^import collections$/;"	i
csv	projNET/BAFpipeline/geneutils.py	/^import csv$/;"	i
unittest	projNET/BAFpipeline/geneutils.py	/^import unittest$/;"	i
REF_PATH	projNET/BAFpipeline/geneutils.py	/^REF_PATH = '\/ifs\/data\/c2b2\/ngs_lab\/ngs\/resources\/bwa_samtools_gatk_DB\/human_g1k_v37.fasta'$/;"	v
GC_WINDOW_SIZE	projNET/BAFpipeline/geneutils.py	/^GC_WINDOW_SIZE = 213$/;"	v
getMeanAndVarianceOfD	projNET/BAFpipeline/geneutils.py	/^def getMeanAndVarianceOfD(counts_d):$/;"	f
getWindowL	projNET/BAFpipeline/geneutils.py	/^def getWindowL(contig_exon_l, window_size):$/;"	f
getEquallySizedWindowsL	projNET/BAFpipeline/geneutils.py	/^def getEquallySizedWindowsL(contig_exons_l, window_size):$/;"	f
getGCPercentL	projNET/BAFpipeline/geneutils.py	/^def getGCPercentL(window_l):$/;"	f
getContigExonsL	projNET/BAFpipeline/geneutils.py	/^def getContigExonsL(exons_l, contig):$/;"	f
WindowReadCountdGenerator	projNET/BAFpipeline/geneutils.py	/^def WindowReadCountdGenerator(windows_l, bam_fn, with_chr_flag):$/;"	f
getMidpointD	projNET/BAFpipeline/geneutils.py	/^def getMidpointD(window, bam_fn, with_chr_flag):$/;"	f
getMeanAndVariance	projNET/BAFpipeline/geneutils.py	/^def getMeanAndVariance(counts_l):$/;"	f
getWindowLForExon	projNET/BAFpipeline/geneutils.py	/^def getWindowLForExon(contig, startbase, endbase, window_size):$/;"	f
getExonL	projNET/BAFpipeline/geneutils.py	/^def getExonL(bedfile):$/;"	f
getAverageTemplateLength	projNET/BAFpipeline/geneutils.py	/^def getAverageTemplateLength():$/;"	f
math	projNET/BAFpipeline/geneutils.py	/^    import math$/;"	i
getSequence	projNET/BAFpipeline/geneutils.py	/^def getSequence(contig, startbase, endbase, contig_offset_d):$/;"	f
getContigLength_d	projNET/BAFpipeline/geneutils.py	/^def getContigLength_d():$/;"	f
getContigOffsetD	projNET/BAFpipeline/geneutils.py	/^def getContigOffsetD():$/;"	f
ContigWindowGenerator	projNET/BAFpipeline/geneutils.py	/^def ContigWindowGenerator(contig, window_size, margin, contig_length_d, start):$/;"	f
WindowGCcontentdGenerator	projNET/BAFpipeline/geneutils.py	/^def WindowGCcontentdGenerator(window_l, gc_window_size):$/;"	f
GCContentOb	projNET/BAFpipeline/geneutils.py	/^class GCContentOb(object):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, gc_window_size):$/;"	m	class:GCContentOb
getGCContentd	projNET/BAFpipeline/geneutils.py	/^    def getGCContentd(self, contig, startbase, endbase):$/;"	m	class:GCContentOb
MidpointdGenerator	projNET/BAFpipeline/geneutils.py	/^def MidpointdGenerator(number_lines_to_get, samorbam_fn, verbose = False, stream = False):$/;"	f
NaiveWindowReadCount	projNET/BAFpipeline/geneutils.py	/^def NaiveWindowReadCount(sam_fn, window):$/;"	f
countReadsInWindows	projNET/BAFpipeline/geneutils.py	/^def countReadsInWindows(window_l, sam_path):$/;"	f
deque	projNET/BAFpipeline/geneutils.py	/^    from collections import deque$/;"	i
generateSamFiles	projNET/BAFpipeline/geneutils.py	/^def generateSamFiles(bam_path, probe_bed_path, target_dir_path):$/;"	f
get_contig_s	projNET/BAFpipeline/geneutils.py	/^def get_contig_s(pos_list):$/;"	f
merge_pileups	projNET/BAFpipeline/geneutils.py	/^def merge_pileups(pileup_file_dir_path, merged_pileup_path):$/;"	f
make_dirs	projNET/BAFpipeline/geneutils.py	/^def make_dirs(path_l):$/;"	f
getTimeStamp	projNET/BAFpipeline/geneutils.py	/^def getTimeStamp():$/;"	f
appendListToFile	projNET/BAFpipeline/geneutils.py	/^def appendListToFile(l, path):$/;"	f
writeListToFile	projNET/BAFpipeline/geneutils.py	/^def writeListToFile(l, path):$/;"	f
convertToStringAndWriteListToFile	projNET/BAFpipeline/geneutils.py	/^def convertToStringAndWriteListToFile(l, path):$/;"	f
readListFromFile	projNET/BAFpipeline/geneutils.py	/^def readListFromFile(path, field_l):$/;"	f
writeBedFileFromRegionL	projNET/BAFpipeline/geneutils.py	/^def writeBedFileFromRegionL(exon_l, bed_path):$/;"	f
trigger_samfile_step	projNET/BAFpipeline/geneutils.py	/^def trigger_samfile_step(bed_job_info_ob, contig, sample_name, bam_file_path):$/;"	f
submit_qsub_job	projNET/BAFpipeline/geneutils.py	/^                    qsub_output_path, mem='2G', time=15):$/;"	f
triggerSamfile	projNET/BAFpipeline/geneutils.py	/^def triggerSamfile(bam_path, bed_path, sam_path, contig):$/;"	f
trigger_pileups	projNET/BAFpipeline/geneutils.py	/^def trigger_pileups(bed_dir, bam_path_model, out_dir):$/;"	f
GeneFileOb	projNET/BAFpipeline/geneutils.py	/^class GeneFileOb(object):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:GeneFileOb
__len__	projNET/BAFpipeline/geneutils.py	/^    def __len__(self):$/;"	m	class:GeneFileOb	file:
get_all_lines_l	projNET/BAFpipeline/geneutils.py	/^    def get_all_lines_l(self):$/;"	m	class:GeneFileOb
get_line_d	projNET/BAFpipeline/geneutils.py	/^    def get_line_d(self):$/;"	m	class:GeneFileOb
__iter__	projNET/BAFpipeline/geneutils.py	/^    def __iter__(self):$/;"	m	class:GeneFileOb	file:
memoryLineIter	projNET/BAFpipeline/geneutils.py	/^    def memoryLineIter(self):$/;"	m	class:GeneFileOb
diskLineIter	projNET/BAFpipeline/geneutils.py	/^    def diskLineIter(self):$/;"	m	class:GeneFileOb
memoryGetItem	projNET/BAFpipeline/geneutils.py	/^    def memoryGetItem(self, key):$/;"	m	class:GeneFileOb
diskGetItem	projNET/BAFpipeline/geneutils.py	/^    def diskGetItem(self, key):$/;"	m	class:GeneFileOb
__getitem__	projNET/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:GeneFileOb	file:
getContigPosD	projNET/BAFpipeline/geneutils.py	/^    def getContigPosD(self):$/;"	m	class:GeneFileOb
GeneLineOb	projNET/BAFpipeline/geneutils.py	/^class GeneLineOb(object):$/;"	c
VCFLineOb	projNET/BAFpipeline/geneutils.py	/^class VCFLineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:VCFLineOb
getPos_t	projNET/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:VCFLineOb
getNormalGenotype	projNET/BAFpipeline/geneutils.py	/^    def getNormalGenotype(self):$/;"	m	class:VCFLineOb
getTumorGenotype	projNET/BAFpipeline/geneutils.py	/^    def getTumorGenotype(self):$/;"	m	class:VCFLineOb
getAltNucleotide	projNET/BAFpipeline/geneutils.py	/^    def getAltNucleotide(self):$/;"	m	class:VCFLineOb
isCoding	projNET/BAFpipeline/geneutils.py	/^    def isCoding(self):$/;"	m	class:VCFLineOb
isIndel	projNET/BAFpipeline/geneutils.py	/^    def isIndel(self):$/;"	m	class:VCFLineOb
VCFFileOb	projNET/BAFpipeline/geneutils.py	/^class VCFFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:VCFFileOb
__getitem__	projNET/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:VCFFileOb	file:
PILEUPLineOb	projNET/BAFpipeline/geneutils.py	/^class PILEUPLineOb(GeneLineOb):$/;"	c
indel_regex	projNET/BAFpipeline/geneutils.py	/^    indel_regex = re.compile(r"(-|\\+)\\d+")$/;"	v	class:PILEUPLineOb
startread_regex	projNET/BAFpipeline/geneutils.py	/^    startread_regex = re.compile(r"\\^\\S")$/;"	v	class:PILEUPLineOb
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:PILEUPLineOb
getPos_t	projNET/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:PILEUPLineOb
getReadCount	projNET/BAFpipeline/geneutils.py	/^    def getReadCount(self):$/;"	m	class:PILEUPLineOb
getNucleotideCount	projNET/BAFpipeline/geneutils.py	/^    def getNucleotideCount(self, nucleotide_char):$/;"	m	class:PILEUPLineOb
getAltNucleotideCount	projNET/BAFpipeline/geneutils.py	/^    def getAltNucleotideCount(self):$/;"	m	class:PILEUPLineOb
PILEUPFileOb	projNET/BAFpipeline/geneutils.py	/^class PILEUPFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:PILEUPFileOb
BEDLineOb	projNET/BAFpipeline/geneutils.py	/^class BEDLineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:BEDLineOb
getStartPos_t	projNET/BAFpipeline/geneutils.py	/^    def getStartPos_t(self):$/;"	m	class:BEDLineOb
getEndPos_t	projNET/BAFpipeline/geneutils.py	/^    def getEndPos_t(self):$/;"	m	class:BEDLineOb
getPos_t	projNET/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:BEDLineOb
BEDFileOb	projNET/BAFpipeline/geneutils.py	/^class BEDFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:BEDFileOb
__getitem__	projNET/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:BEDFileOb	file:
SAMLineOb	projNET/BAFpipeline/geneutils.py	/^class SAMLineOb(GeneLineOb):$/;"	c
CIGAR_regex	projNET/BAFpipeline/geneutils.py	/^    CIGAR_regex = re.compile(r"M|I|D|N|S|H|P|=|X")$/;"	v	class:SAMLineOb
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:SAMLineOb
getPos_t	projNET/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:SAMLineOb
getTemplateLength	projNET/BAFpipeline/geneutils.py	/^    def getTemplateLength(self):$/;"	m	class:SAMLineOb
getCIGARString	projNET/BAFpipeline/geneutils.py	/^    def getCIGARString(self):$/;"	m	class:SAMLineOb
getCIGARCount	projNET/BAFpipeline/geneutils.py	/^    def getCIGARCount(self):$/;"	m	class:SAMLineOb
isUnmapped	projNET/BAFpipeline/geneutils.py	/^    def isUnmapped(self):$/;"	m	class:SAMLineOb
isFirstRead	projNET/BAFpipeline/geneutils.py	/^    def isFirstRead(self):$/;"	m	class:SAMLineOb
getTemplateName	projNET/BAFpipeline/geneutils.py	/^    def getTemplateName(self):$/;"	m	class:SAMLineOb
getMidpoint	projNET/BAFpipeline/geneutils.py	/^    def getMidpoint(self):$/;"	m	class:SAMLineOb
getPosNext	projNET/BAFpipeline/geneutils.py	/^    def getPosNext(self):$/;"	m	class:SAMLineOb
SAMFileOb	projNET/BAFpipeline/geneutils.py	/^class SAMFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:SAMFileOb
__getitem__	projNET/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:SAMFileOb	file:
FAILineOb	projNET/BAFpipeline/geneutils.py	/^class FAILineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^    def __init__(self, line):$/;"	m	class:FAILineOb
getPos_t	projNET/BAFpipeline/geneutils.py	/^    def getPos_t(self):$/;"	m	class:FAILineOb
getOffset	projNET/BAFpipeline/geneutils.py	/^    def getOffset(self):$/;"	m	class:FAILineOb
getContig	projNET/BAFpipeline/geneutils.py	/^    def getContig(self):$/;"	m	class:FAILineOb
getLength	projNET/BAFpipeline/geneutils.py	/^    def getLength(self):$/;"	m	class:FAILineOb
isNumeric	projNET/BAFpipeline/geneutils.py	/^    def isNumeric(self):$/;"	m	class:FAILineOb
FAIFileOb	projNET/BAFpipeline/geneutils.py	/^class FAIFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:FAIFileOb
__getitem__	projNET/BAFpipeline/geneutils.py	/^    def __getitem__(self, key):$/;"	m	class:FAIFileOb	file:
unpickle	projNET/BAFpipeline/geneutils.py	/^def unpickle(pickle_fn):$/;"	f
MidpointAfterStart	projNET/BAFpipeline/geneutils.py	/^class MidpointAfterStart(unittest.TestCase):$/;"	c
test	projNET/BAFpipeline/geneutils.py	/^    def test(self):$/;"	m	class:MidpointAfterStart
die	projNET/BAFpipeline/BAFPLOT.sh	/^die () {$/;"	f
die	projNET/BAFpipeline/pileup_to_freq.sh	/^die () {$/;"	f
geneutils	projNET/BAFpipeline/pileup_to_freq.py	/^import geneutils$/;"	i
OptionParser	projNET/BAFpipeline/pileup_to_freq.py	/^from optparse import OptionParser$/;"	i
MakeFreq	projNET/BAFpipeline/pileup_to_freq.py	/^def MakeFreq(pileup_file, output_file):$/;"	f
parser	projNET/BAFpipeline/pileup_to_freq.py	/^  parser = OptionParser()$/;"	v
pileup_file	projNET/BAFpipeline/pileup_to_freq.py	/^  pileup_file = args[0]$/;"	v
output_file	projNET/BAFpipeline/pileup_to_freq.py	/^  output_file = args[1]  $/;"	v
re	projNET/BAFpipeline/geneutils-1.py	/^import re$/;"	i
pickle	projNET/BAFpipeline/geneutils-1.py	/^import pickle$/;"	i
itemgetter	projNET/BAFpipeline/geneutils-1.py	/^from operator import itemgetter$/;"	i
sys	projNET/BAFpipeline/geneutils-1.py	/^import sys$/;"	i
subprocess	projNET/BAFpipeline/geneutils-1.py	/^import subprocess$/;"	i
os	projNET/BAFpipeline/geneutils-1.py	/^import os$/;"	i
string	projNET/BAFpipeline/geneutils-1.py	/^import string$/;"	i
time	projNET/BAFpipeline/geneutils-1.py	/^import time$/;"	i
shutil	projNET/BAFpipeline/geneutils-1.py	/^import shutil$/;"	i
datetime	projNET/BAFpipeline/geneutils-1.py	/^import datetime$/;"	i
collections	projNET/BAFpipeline/geneutils-1.py	/^import collections$/;"	i
csv	projNET/BAFpipeline/geneutils-1.py	/^import csv$/;"	i
unittest	projNET/BAFpipeline/geneutils-1.py	/^import unittest$/;"	i
REF_PATH	projNET/BAFpipeline/geneutils-1.py	/^REF_PATH = '\/ifs\/data\/c2b2\/ngs_lab\/ngs\/resources\/bwa_samtools_gatk_DB\/human_g1k_v37.fasta'$/;"	v
GC_WINDOW_SIZE	projNET/BAFpipeline/geneutils-1.py	/^GC_WINDOW_SIZE = 213$/;"	v
getMeanAndVarianceOfD	projNET/BAFpipeline/geneutils-1.py	/^def getMeanAndVarianceOfD(counts_d):$/;"	f
getWindowL	projNET/BAFpipeline/geneutils-1.py	/^def getWindowL(contig_exon_l, window_size):$/;"	f
getEquallySizedWindowsL	projNET/BAFpipeline/geneutils-1.py	/^def getEquallySizedWindowsL(contig_exons_l, window_size):$/;"	f
getGCPercentL	projNET/BAFpipeline/geneutils-1.py	/^def getGCPercentL(window_l):$/;"	f
getContigExonsL	projNET/BAFpipeline/geneutils-1.py	/^def getContigExonsL(exons_l, contig):$/;"	f
WindowReadCountdGenerator	projNET/BAFpipeline/geneutils-1.py	/^def WindowReadCountdGenerator(windows_l, bam_fn, with_chr_flag):$/;"	f
getMidpointD	projNET/BAFpipeline/geneutils-1.py	/^def getMidpointD(window, bam_fn, with_chr_flag):$/;"	f
getMeanAndVariance	projNET/BAFpipeline/geneutils-1.py	/^def getMeanAndVariance(counts_l):$/;"	f
getWindowLForExon	projNET/BAFpipeline/geneutils-1.py	/^def getWindowLForExon(contig, startbase, endbase, window_size):$/;"	f
getExonL	projNET/BAFpipeline/geneutils-1.py	/^def getExonL(bedfile):$/;"	f
getAverageTemplateLength	projNET/BAFpipeline/geneutils-1.py	/^def getAverageTemplateLength():$/;"	f
math	projNET/BAFpipeline/geneutils-1.py	/^    import math$/;"	i
getSequence	projNET/BAFpipeline/geneutils-1.py	/^def getSequence(contig, startbase, endbase, contig_offset_d):$/;"	f
getContigLength_d	projNET/BAFpipeline/geneutils-1.py	/^def getContigLength_d():$/;"	f
getContigOffsetD	projNET/BAFpipeline/geneutils-1.py	/^def getContigOffsetD():$/;"	f
ContigWindowGenerator	projNET/BAFpipeline/geneutils-1.py	/^def ContigWindowGenerator(contig, window_size, margin, contig_length_d, start):$/;"	f
WindowGCcontentdGenerator	projNET/BAFpipeline/geneutils-1.py	/^def WindowGCcontentdGenerator(window_l, gc_window_size):$/;"	f
GCContentOb	projNET/BAFpipeline/geneutils-1.py	/^class GCContentOb(object):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, gc_window_size):$/;"	m	class:GCContentOb
getGCContentd	projNET/BAFpipeline/geneutils-1.py	/^    def getGCContentd(self, contig, startbase, endbase):$/;"	m	class:GCContentOb
MidpointdGenerator	projNET/BAFpipeline/geneutils-1.py	/^def MidpointdGenerator(number_lines_to_get, samorbam_fn, verbose = False, stream = False):$/;"	f
NaiveWindowReadCount	projNET/BAFpipeline/geneutils-1.py	/^def NaiveWindowReadCount(sam_fn, window):$/;"	f
countReadsInWindows	projNET/BAFpipeline/geneutils-1.py	/^def countReadsInWindows(window_l, sam_path):$/;"	f
deque	projNET/BAFpipeline/geneutils-1.py	/^    from collections import deque$/;"	i
generateSamFiles	projNET/BAFpipeline/geneutils-1.py	/^def generateSamFiles(bam_path, probe_bed_path, target_dir_path):$/;"	f
get_contig_s	projNET/BAFpipeline/geneutils-1.py	/^def get_contig_s(pos_list):$/;"	f
merge_pileups	projNET/BAFpipeline/geneutils-1.py	/^def merge_pileups(pileup_file_dir_path, merged_pileup_path):$/;"	f
make_dirs	projNET/BAFpipeline/geneutils-1.py	/^def make_dirs(path_l):$/;"	f
getTimeStamp	projNET/BAFpipeline/geneutils-1.py	/^def getTimeStamp():$/;"	f
appendListToFile	projNET/BAFpipeline/geneutils-1.py	/^def appendListToFile(l, path):$/;"	f
writeListToFile	projNET/BAFpipeline/geneutils-1.py	/^def writeListToFile(l, path):$/;"	f
convertToStringAndWriteListToFile	projNET/BAFpipeline/geneutils-1.py	/^def convertToStringAndWriteListToFile(l, path):$/;"	f
readListFromFile	projNET/BAFpipeline/geneutils-1.py	/^def readListFromFile(path, field_l):$/;"	f
writeBedFileFromRegionL	projNET/BAFpipeline/geneutils-1.py	/^def writeBedFileFromRegionL(exon_l, bed_path):$/;"	f
trigger_samfile_step	projNET/BAFpipeline/geneutils-1.py	/^def trigger_samfile_step(bed_job_info_ob, contig, sample_name, bam_file_path):$/;"	f
submit_qsub_job	projNET/BAFpipeline/geneutils-1.py	/^                    qsub_output_path, mem='2G', time=15):$/;"	f
triggerSamfile	projNET/BAFpipeline/geneutils-1.py	/^def triggerSamfile(bam_path, bed_path, sam_path, contig):$/;"	f
trigger_pileups	projNET/BAFpipeline/geneutils-1.py	/^def trigger_pileups(bed_dir, bam_path_model, out_dir):$/;"	f
GeneFileOb	projNET/BAFpipeline/geneutils-1.py	/^class GeneFileOb(object):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:GeneFileOb
__len__	projNET/BAFpipeline/geneutils-1.py	/^    def __len__(self):$/;"	m	class:GeneFileOb	file:
get_all_lines_l	projNET/BAFpipeline/geneutils-1.py	/^    def get_all_lines_l(self):$/;"	m	class:GeneFileOb
get_line_d	projNET/BAFpipeline/geneutils-1.py	/^    def get_line_d(self):$/;"	m	class:GeneFileOb
__iter__	projNET/BAFpipeline/geneutils-1.py	/^    def __iter__(self):$/;"	m	class:GeneFileOb	file:
memoryLineIter	projNET/BAFpipeline/geneutils-1.py	/^    def memoryLineIter(self):$/;"	m	class:GeneFileOb
diskLineIter	projNET/BAFpipeline/geneutils-1.py	/^    def diskLineIter(self):$/;"	m	class:GeneFileOb
memoryGetItem	projNET/BAFpipeline/geneutils-1.py	/^    def memoryGetItem(self, key):$/;"	m	class:GeneFileOb
diskGetItem	projNET/BAFpipeline/geneutils-1.py	/^    def diskGetItem(self, key):$/;"	m	class:GeneFileOb
__getitem__	projNET/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:GeneFileOb	file:
getContigPosD	projNET/BAFpipeline/geneutils-1.py	/^    def getContigPosD(self):$/;"	m	class:GeneFileOb
GeneLineOb	projNET/BAFpipeline/geneutils-1.py	/^class GeneLineOb(object):$/;"	c
VCFLineOb	projNET/BAFpipeline/geneutils-1.py	/^class VCFLineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:VCFLineOb
getPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:VCFLineOb
getNormalGenotype	projNET/BAFpipeline/geneutils-1.py	/^    def getNormalGenotype(self):$/;"	m	class:VCFLineOb
getTumorGenotype	projNET/BAFpipeline/geneutils-1.py	/^    def getTumorGenotype(self):$/;"	m	class:VCFLineOb
getAltNucleotide	projNET/BAFpipeline/geneutils-1.py	/^    def getAltNucleotide(self):$/;"	m	class:VCFLineOb
isCoding	projNET/BAFpipeline/geneutils-1.py	/^    def isCoding(self):$/;"	m	class:VCFLineOb
isIndel	projNET/BAFpipeline/geneutils-1.py	/^    def isIndel(self):$/;"	m	class:VCFLineOb
VCFFileOb	projNET/BAFpipeline/geneutils-1.py	/^class VCFFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:VCFFileOb
__getitem__	projNET/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:VCFFileOb	file:
PILEUPLineOb	projNET/BAFpipeline/geneutils-1.py	/^class PILEUPLineOb(GeneLineOb):$/;"	c
indel_regex	projNET/BAFpipeline/geneutils-1.py	/^    indel_regex = re.compile(r"(-|\\+)\\d+")$/;"	v	class:PILEUPLineOb
startread_regex	projNET/BAFpipeline/geneutils-1.py	/^    startread_regex = re.compile(r"\\^\\S")$/;"	v	class:PILEUPLineOb
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:PILEUPLineOb
getPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:PILEUPLineOb
getReadCount	projNET/BAFpipeline/geneutils-1.py	/^    def getReadCount(self):$/;"	m	class:PILEUPLineOb
getNucleotideCount	projNET/BAFpipeline/geneutils-1.py	/^    def getNucleotideCount(self, nucleotide_char):$/;"	m	class:PILEUPLineOb
getAltNucleotideCount	projNET/BAFpipeline/geneutils-1.py	/^    def getAltNucleotideCount(self):$/;"	m	class:PILEUPLineOb
PILEUPFileOb	projNET/BAFpipeline/geneutils-1.py	/^class PILEUPFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 one_record_per_pos_flag = True):$/;"	m	class:PILEUPFileOb
BEDLineOb	projNET/BAFpipeline/geneutils-1.py	/^class BEDLineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:BEDLineOb
getStartPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getStartPos_t(self):$/;"	m	class:BEDLineOb
getEndPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getEndPos_t(self):$/;"	m	class:BEDLineOb
getPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:BEDLineOb
BEDFileOb	projNET/BAFpipeline/geneutils-1.py	/^class BEDFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:BEDFileOb
__getitem__	projNET/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:BEDFileOb	file:
SAMLineOb	projNET/BAFpipeline/geneutils-1.py	/^class SAMLineOb(GeneLineOb):$/;"	c
CIGAR_regex	projNET/BAFpipeline/geneutils-1.py	/^    CIGAR_regex = re.compile(r"M|I|D|N|S|H|P|=|X")$/;"	v	class:SAMLineOb
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:SAMLineOb
getPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:SAMLineOb
getTemplateLength	projNET/BAFpipeline/geneutils-1.py	/^    def getTemplateLength(self):$/;"	m	class:SAMLineOb
getCIGARString	projNET/BAFpipeline/geneutils-1.py	/^    def getCIGARString(self):$/;"	m	class:SAMLineOb
getCIGARCount	projNET/BAFpipeline/geneutils-1.py	/^    def getCIGARCount(self):$/;"	m	class:SAMLineOb
isUnmapped	projNET/BAFpipeline/geneutils-1.py	/^    def isUnmapped(self):$/;"	m	class:SAMLineOb
isFirstRead	projNET/BAFpipeline/geneutils-1.py	/^    def isFirstRead(self):$/;"	m	class:SAMLineOb
getTemplateName	projNET/BAFpipeline/geneutils-1.py	/^    def getTemplateName(self):$/;"	m	class:SAMLineOb
getMidpoint	projNET/BAFpipeline/geneutils-1.py	/^    def getMidpoint(self):$/;"	m	class:SAMLineOb
getPosNext	projNET/BAFpipeline/geneutils-1.py	/^    def getPosNext(self):$/;"	m	class:SAMLineOb
SAMFileOb	projNET/BAFpipeline/geneutils-1.py	/^class SAMFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:SAMFileOb
__getitem__	projNET/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:SAMFileOb	file:
FAILineOb	projNET/BAFpipeline/geneutils-1.py	/^class FAILineOb(GeneLineOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^    def __init__(self, line):$/;"	m	class:FAILineOb
getPos_t	projNET/BAFpipeline/geneutils-1.py	/^    def getPos_t(self):$/;"	m	class:FAILineOb
getOffset	projNET/BAFpipeline/geneutils-1.py	/^    def getOffset(self):$/;"	m	class:FAILineOb
getContig	projNET/BAFpipeline/geneutils-1.py	/^    def getContig(self):$/;"	m	class:FAILineOb
getLength	projNET/BAFpipeline/geneutils-1.py	/^    def getLength(self):$/;"	m	class:FAILineOb
isNumeric	projNET/BAFpipeline/geneutils-1.py	/^    def isNumeric(self):$/;"	m	class:FAILineOb
FAIFileOb	projNET/BAFpipeline/geneutils-1.py	/^class FAIFileOb(GeneFileOb):$/;"	c
__init__	projNET/BAFpipeline/geneutils-1.py	/^                 index_flag = False, one_record_per_pos_flag = False):$/;"	m	class:FAIFileOb
__getitem__	projNET/BAFpipeline/geneutils-1.py	/^    def __getitem__(self, key):$/;"	m	class:FAIFileOb	file:
unpickle	projNET/BAFpipeline/geneutils-1.py	/^def unpickle(pickle_fn):$/;"	f
MidpointAfterStart	projNET/BAFpipeline/geneutils-1.py	/^class MidpointAfterStart(unittest.TestCase):$/;"	c
test	projNET/BAFpipeline/geneutils-1.py	/^    def test(self):$/;"	m	class:MidpointAfterStart
die	projNET/BAFpipeline/bed_to_pileup.sh	/^die () {$/;"	f
