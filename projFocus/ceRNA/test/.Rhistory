?plot
setwd("/Volumes/ac_lab/jh3283/SCRATCH/projAML/WXS/gatkCovDepth/report")
data <- read.table("ALL.SAMPLE.rmdup.new.bam.list.sample_summary",header=T)
data$patient_id <- unlist(lapply(data$sample_id,FUN=function(x){unlist(substr(as.		aracter(x),start=11,stop=20))}))
plot(x=as.factor(data$patient_id),y=data$mean,las=2,cex.axis=.8)
pdf("gatkMeanCovALL.pdf")
plot(x=as.factor(data$patient_id),y=data$mean,las=2,cex.axis=.5)
dev.off()
png("gatkMeanCovALL.png")
plot(x=as.factor(data$patient_id),y=data$mean,las=2,cex.axis=.5)
dev.off()
data <-read.table("~/Downloads/jhu-usc.edu_GBM.HumanMethylation27.Level_3.3.5.0/jhu-usc.edu_GBM.HumanMethylation27.3.lvl-3.TCGA-06-0155-01B-01D-0521-05.txt",skip=1,header=T,sep="\t")
plot(density(data$Beta_value),col="blue")
plot(density(na.omit(data$Beta_value)),col="blue")
getwd()
hist(na.omit(data$Beta_value),breaks=100,col="blue")
require(reshape2)
?dcast
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
#!/usr/bin/Rscript
#Author: Jing He
#input: <file: expression and snp gt for one gene >
#output: <file: gene: snp with weight
#Usage: Rscript grplassoSNP.r input
#Description:
# args = commandArgs(TRUE)
#  if (is.null(args)){
#       print("Please provide parameters")
#    exit
#     }else{
#          print(args)
#     }
#setwd("/Volumes/ac_lab/jh3283/scripts/projFocus/ceRNA/test/")
setwd("/Volumes//ifs/home/c2b2/ac_lab/jh3283/scripts/projFocus/ceRNA/test")
##----------------------------
#setting parameters
# inputmut = args[1]
# inputmut = "/ifs/scratch/c2b2/ac_lab/jh3283/projFocus/ceRNA/result/grpreg/test_knowBRCA.gene_snp_meth_cnv"
# inputexp = "/ifs/scratch/c2b2/ac_lab/jh3283/projFocus/ceRNA/result/grpreg/test_knowBRCA.gene_exp"
inputsnp = "input_test_reg_snp.mat"
inputexp = "input_test_reg_exp.mat"
inputcnv = "input_test_reg_cnv.mat"
##----------------------------
#loading snp data
dataSnp            = read.table(inputsnp,header =T)
rownames(dataSnp)  = dataSnp[,2]
dataSnp = dataSnp[,-c(1:2)]
##load cnv data
dataCnv = read.table(inputcnv,header =T)
rownames(dataCnv)  = dataCnv[,2]
dataCnv = dataCnv[,-c(1:2)]
##load exp data
dataExp           = read.table(inputexp,header =T)
rownames(dataExp) = dataExp[,1]
genename  = dataExp[,1]
dataExp   = sapply(dataExp[,-c(1:4)],function(x){as.numeric(as.character(x))})
plot(density(dataExp))
##-------useful functions
geneExpSigmoid = function(x){
#function to normalize and transform gene expression using sigmoid function
x = sapply(x,as.numeric)
y = (x - mean(x)) / sd(x)
return(1/(1+exp(-y)))
}
##------
dataExpSg = geneExpSigmoid(dataExp)
plot(density(dataExpSg))
data_merge = t(rbind(dataExpSg,dataCnv,dataSnp))
### function to do logistic regression to one gene data
require("glmnet")
gla_cv  =     cv.glmnet(y = data_merge[,1], x = data_merge[,-1],
nfolds = 10,alpha = 1,type.multinomial = "grouped")
for (alpha in seq(0,1,by=0.05)) {
gla_fit <- glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.multinomial = "grouped")
plot(gla_fit,
main = paste("alpha = ",alpha) )
}
plot(gla_fit)
gla$lambda.1se
gla_best  =   gla$glmnet.fit
gla.coef  =   coef(gla$glmnet.fit, s = gla$lambda.1se)
plot(gla$glmnet.fit)
gla.coef[which(gla.coef != 0)]
#  install.packages("lars")
require(lars)
reg_lasso =   lars(y = data_merge[,1], x = data_merge[,-1],type = "lasso")
#plot(reg_lasso,trace = F)
# require("glmnetcr")
# glmnet.fit <- glmnet.cr(y = data_merge[,1], x = data_merge[,-1],alpha = 1)
# AIC <- select.glmnet.cr(glmnet.fit, which="AIC")
# fitted(glmnet.fit, s=AIC)
# ######----------------------------
# #this part under development
# expSCReg = function (mdata,edata){
#   mdmat = t(mdata)
#   dmat = data.frame(edata,mdmat)
#   glm_out = glm(edata ~ mdmat , family=binomial(logit))
#   lm_logit = lm(edata ~ mdmat)
#   pdf("lasso_logit.pdf")
#   plot(glm_out)
#   plot(lm_linear)
#   plot(lm_logit)
#   reg_lasso_cv = cv.lars(x=mdmat, y = edata, K = 10, plot.it = TRUE)
#   # reg_lasso = lars(x = mdmat, y = t(edata) ,type = "lasso")
#   reg_lasso_cv = cv.lars(x=mdmat, y = t(edata), K = 10, plot.it = TRUE)
#   best <- reg_lasso_cv$index[which.min(reg_lasso_cv$cv)]
#   coef <- coef.lars(reg_lasso, mode = "fraction", s = best)
#   coef[coef != 0]
#   # plot(reg_lasso,breaks=F)
#   plot(gla.best)
#   plot(reg_lasso,breaks =F)
#   boxplot(reg_lasso$beta,xlab="genomic_mutations",y="coefficients",pch = "*")
#   dev.off()
# }
# ##----------------------------development-end--------------
str(reg_lasso)
type = "lasso",trace = TRUE)
reg_lasso_cv =   cv.lars(y = data_merge[,1], x = data_merge[,-1],
type = "lasso",trace = TRUE)
str(cv.lars)
str(reg_lasso_cv)
which.min(reg_lasso_cv$cv.error)
reg_lasso_cv$cv.error[which.min(reg_lasso_cv$cv.error)]
reg_lasso_cv$cv[which.min(reg_lasso_cv$cv.error)]
reg_lasso_cv$index[which.min(reg_lasso_cv$cv.error)]
plotCVlars(reg_lasso_cv)
plotCVlars(plotCVlars)
coef(reg_lasso)
dim(coef(reg_lasso))
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.multinomial = "grouped",lambda=gla_cv$lambda.min)
plot(gla$glmnet.fit)
plot(gla_fit)
gla_cv$lambda.min
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.multinomial = "grouped",lambda=gla_cv$lambda.1se)
plot(gla_fit)
gla_cv  =     cv.glmnet(y = data_merge[,1], x = data_merge[,-1],
nfolds = 10,alpha = 1,type.multinomial = "grouped")
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.multinomial = "grouped",lambda=gla_cv$lambda.1se)
plot(gla_fit)
gla_cv$lambda.1se
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.multinomial = "grouped",lambda=0.511)
plot(gla_fit)
str(reg_lasso_cv)
str(reg_lasso)
exp(0.511)
log(0.511)
gla_cv  =     cv.glmnet(y = data_merge[,1], x = data_merge[,-1],
nfolds = 10,alpha = 1,type.gaussian="covariance" )
gla_cv$lambda.1se
gla_cv$lambda.m
gla_cv$lambda.min
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.gaussian="covariance" ,lambda=gla_cv$lambda.1se)
plot(gla_fit)
predict(gla_fit,"coefficients")
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.gaussian="covariance" ,lambda=0.511)
gla_fit   =   glmnet(y = data_merge[,1], x = data_merge[,-1],
alpha = alpha,
type.gaussian="covariance" ,lambda=gla_cv$lambda.min)
t(coef(model))
t(coef(gla_fit))
predict(gla_fit,"coefficients")
out = t(coef(gla_fit))
fix(out)
fix(out)
out = as.matrix(t(coef(gla_fit)))
View(out)
plot(out)
coeff = as.matrix(t(coef(gla_fit)))
plot(x=1:len(coeff), y = coeff)
plot(x=1:length(coeff), y = coeff)
names(coeff)
colnames(coeff)
text(x=1:length(coeff), y = coeff,labels=colnames(coeff))
coeff = coeff[coeff != 0]
plot(x=1:length(coeff), y = coeff)
text(x=1:length(coeff), y = coeff,labels=colnames(coeff))
length(coeff)
coeff = as.matrix(t(coef(gla_fit)))
coeff = coeff[order(coeff)]
coeff
plot(x=1:length(coeff), y = coeff)
lambda    =   gla_cv$lambda.min
plot(x=1:length(coeff), y = coeff,col='blue',main = paste("lambda =",lambda))
plot(x=1:length(coeff), y = coeff,col='blue',main = paste("lambda =",round(lambda,5))
)
install.packages("irr")
library(irr)
library(irr)
dataSnp_new <- data.frame(R1="",R2="",stringsAsFactors=FALSE)
for(x in 1:nrow(dataSnp)) {
dataSnp_new <- rbind(dataSnp_new,rep(names(dataSnp),dataSnp[x,]))
}
rm(x)
dataSnp_new <- dataSnp_new[-1,]
kappa2(ratings=dataSnp_new)
?library(irr)
dataSnp_new <- data.frame(R1="",R2="",stringsAsFactors=FALSE)
for(x in 1:nrow(dataSnp)) {
dataSnp_new <- rbind(dataSnp_new,rep(names(dataSnp),dataSnp[x,]))
}
rm(x)
dataSnp_new <- dataSnp_new[-1,]
kappa2(ratings=dataSnp_new)
?kappa2
names(dataSnp)
dataSnp_new <- data.frame(R1="",R2="",stringsAsFactors=FALSE)
for(x in 1:ncol(dataSnp)) {
dataSnp_new <- rbind(dataSnp_new,rep(names(dataSnp),dataSnp[,x]))
}
dataSnp_new <- data.frame(R1="",R2="",stringsAsFactors=FALSE)
for(x in 1:ncol(dataSnp)) {
dataSnp_new <- rbind(dataSnp_new,rep(rownames(dataSnp),dataSnp[,x]))
}
rm(x)
View(dataSnp_new)
dataSnp_new <- dataSnp_new[-1,]
kappa2(ratings=dataSnp_new)
View(dataSnp_new)
View(dataSnp_new)
kappa2(ratings=t(dataSnp[1:2,]))
for ( i in 1:nrow(dataSnp))
for ( j in i+1:nrow(dataSnp))
kcval = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$value
kcp = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$p.value
for ( i in 1:nrow(dataSnp))
for ( j in i+1:nrow(dataSnp))
kcval[i,j] = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$value
kcp[i,j]   = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$p.value
kcval = matrix(nrow=nrow(dataSnp), ncol= ncol(dataSnp))
for ( i in 1:nrow(dataSnp))
for ( j in i+1:nrow(dataSnp))
kcval[i,j] = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$value
kcp[i,j]   = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$p.value
for ( i in 1:nrow(dataSnp))
for ( j in (i+1):nrow(dataSnp))
kcval[i,j] = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])) )$value
kcp[i,j]   = kappa2(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$p.value
kcval[i,j] = kappa2(ratings=cbind(dataSnp[i,],dataSnp[j,]) )$value
kcval[i,j] = kappam(ratings=cbind(dataSnp[i,],dataSnp[j,]) )$value
?kappam
?kappam.light
for ( i in 1:nrow(dataSnp))
for ( j in (i+1):nrow(dataSnp))
kcval[i,j] = kappam.light(ratings=cbind(dataSnp[i,],dataSnp[j,]) )$value
kcp[i,j]   = kappam.light(ratings=t(cbind(dataSnp[i,],dataSnp[j,])))$p.value
kcval[i,j] = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])) )$value
for ( i in 1:nrow(dataSnp))
for ( j in (i+1):nrow(dataSnp))
kcval[i,j] = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])) )$value
kcp[i,j]   = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])))$p.value
kappa2(ratings=dataSnp_new )
dataSnp_new <- data.frame(R1="",R2="",R3="",stringsAsFactors=FALSE)
for(x in 1:nrow(dataSnp)) {
dataSnp_new <- rbind(dataSnp_new,rep(names(dataSnp),dataSnp[x,]))
}
View(dataSnp_new)
rm(x)
dataSnp_new <- dataSnp_new[-1,]
kappam.fleiss(ratings=dataSnp_new )
kappam.fleiss(ratings=dataSnp )
kappam.light(ratings=dataSnp )
kappam.fleiss(ratings = t(dataSnp) )
kappam.light(ratings  = t(dataSnp ))
install.packages("psych")
require("psych")
cohen.kappa(dataSnp[1,],dataSnp[2,])
cohen.kappa(t(rbind(dataSnp[1,],dataSnp[2,])))
cohen.kappa(t(rbind(dataSnp[1,],dataSnp[2,])))$agree
cohen.kappa(dataSnp_new)$agree
cohen.kappa(dataSnp_new)
cohen.kappa(t(rbind(dataSnp[1,],dataSnp[2,])))$plevel
cohen.kappa(t(rbind(dataSnp[1,],dataSnp[2,])))$confid
kappam.fleiss(ratings = t(dataSnp) )$ratings
kappam.fleiss(ratings = t(dataSnp) )$p.value
kappam.fleiss(ratings = t(dataSnp) )$detail
kappam.fleiss(ratings = t(dataSnp) )$detail
kappam.fleiss(ratings = t(dataSnp),exact=TRUE )$detail
install.packages("knn")
install.packages("fnn")
install.packages("FNN")
require(FNN)
KL.dist(dataSnp,dataSnp)
dataSnp = apply(dataSnp,c(1,2),as.numeric)
KL.dist(dataSnp,dataSnp)
KL.divergence(dataSnp,dataSnp)
View(dataSnp)
KL.divergence(dataSnp[1,],dataSnp[2,])
KL.divergence(dataSnp)
KL.divergence(dataSnp,dataSnp)
KL.divergence(dataSnp,dataSnp,k=53)
set.seed(1000)
X<- rexp(10000, rate=0.2)
Y<- rexp(10000, rate=0.4)
KL.dist(X, Y, k=5)
KLx.dist(X, Y, k=5)
X
Y
KL.dist(X, Y, k=5)
KLx.dist(X, Y, k=5)
mean(KL.dist(X, Y, k=5))
mean(KL.divergence(X, Y, k=5))
KL.divergence(X, Y, k=5)
?reduce
?Reduce
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("/Volumes//ifs/home/c2b2/ac_lab/jh3283/scripts/projFocus/ceRNA/test")
inputsnp = "input_test_reg_snp.mat"
inputexp = "input_test_reg_exp.mat"
inputcnv = "input_test_reg_cnv.mat"
dataSnp            = read.table(inputsnp,header =T)
rownames(dataSnp)  = dataSnp[,2]
dataSnp = dataSnp[,-c(1:2)]
dataCnv = read.table(inputcnv,header =T)
rownames(dataCnv)  = dataCnv[,2]
dataCnv = dataCnv[,-c(1:2)]
dataExp           = read.table(inputexp,header =T)
rownames(dataExp) = dataExp[,1]
genename  = dataExp[,1]
dataExp   = sapply(dataExp[,-c(1:4)],function(x){as.numeric(as.character(x))})
plot(density(dataExp))
geneExpSigmoid = function(x){
#function to normalize and transform gene expression using sigmoid function
x = sapply(x,as.numeric)
y = (x - mean(x)) / sd(x)
return(1/(1+exp(-y)))
}
dataExpSg = geneExpSigmoid(dataExp)
plot(density(dataExpSg))
data_merge = t(rbind(dataExpSg,dataCnv,dataSnp))
install.packages("entropy")
require(entropy)
?entropy
freqs.empirical(dataSnp)
dim(freqs.empirical(dataSnp))
?KL.empirical
KL.empirical(dataSnp)
KL.empirical(dataSnp)
KL.empirical(y1=dataSnp[1,],y2=dataSnp[2,])
entropy.empirical(y1=dataSnp[1,],y2=dataSnp[2,])
mi.empirical(dataSnp)
entropy(dataSnp,k-10)
entropy(as.matrix(dataSnp),k-10)
entropy(as.matrix(dataSnp),k=10)
KL.empirical(y1=dataSnp[1,],y2=dataSnp[2,])
dataExp           = read.table(inputexp,header =T)
rownames(dataExp) = dataExp[,1]
genename  = dataExp[,1]
dataExp   = sapply(dataExp[,-c(1:4)],function(x){as.numeric(as.character(x))})
dataExp           = read.table(inputexp,header =T)
rownames(dataExp) = dataExp[,1]
genename  = dataExp[,1]
dataExp   = sapply(dataExp[,-c(1:4)],function(x){as.numeric(as.character(x))})
plot(density(dataExp))
kappam.light(t(dataSnp))
ckm = kappam.light(t(dataSnp))
ckm$value
str(ckm)
ckm = kappam.fleiss(t(dataSnp))
str(ckm)
ckm = kappam.fleiss(t(dataSnp))
str(ckm)
ckm = kappa2(dataSnp[1,],dataSnp[2,])
ckm = kappa2(cbind(dataSnp[1,],dataSnp[2,]))
ckm = kappam.light(t(dataSnp[1:2,]))
ckm
for ( i in 1:nrow(dataSnp))
for ( j in (i+1):nrow(dataSnp))
{ kcval[i,j] = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])) )$value
kcp[i,j]   = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])))$p.value }
kcp   = matrix(nrow=nrow(dataSnp), ncol= ncol(dataSnp))
for ( i in 1:nrow(dataSnp))
for ( j in (i+1):nrow(dataSnp))
{ kcval[i,j] = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])) )$value
kcp[i,j]   = kappa2(ratings=t(rbind(dataSnp[i,],dataSnp[j,])))$p.value }
i = 1
j = 1
{ kcval[i,j] = kappa2(ratings= cbind(dataSnp[i,],dataSnp[j,]) )$value
}
cbind(dataSnp[i, ], dataSnp[j, ])
dim(cbind(dataSnp[i, ], dataSnp[j, ]))
dim(t(rbind(dataSnp[i, ], dataSnp[j, ])))
kcval[i,j] = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )$value
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j] = kp2$value
kcp[i,j]  = kp2$p.value
kcval
topleft(kcval)
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j] = kcval[j,i] = kp2$value
kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
View(kcp)
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j] = kcval[j,i] = kp2$value
kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
View(kcp)
View(kcval)
kcval = matrix(nrow=nrow(dataSnp), ncol= nrow(dataSnp))
kcp   = matrix(nrow=nrow(dataSnp), ncol= nrow(dataSnp))
Reduce(dataSnp,kappa2
)
Reduce(x=dataSnp,f=kappa2)
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j] = kcval[j,i] = kp2$value
kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j] = kp2$value
#kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
View(kcval)
View(kcval)
kcval = matrix(nrow=nrow(dataSnp), ncol= nrow(dataSnp))
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j]  = kp2$value
#kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
View(kcval)
kcval_svd = svd(kcval)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
X <- hilbert(9)[, 1:6]
X
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j]  = kval[j,i] = kp2$value
#kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
for ( i in 1:nrow(dataSnp))
for ( j in i:nrow(dataSnp))
{
kp2 = kappa2(ratings= t(rbind(dataSnp[i,],dataSnp[j,])) )
kcval[i,j]  = kcval[j,i] = kp2$value
#kcp[i,j]   = kcp[j,i]   = kp2$p.value
}
kcval_svd = svd(kcval)
str(kcval)
str(kcval_svd)
save.image("grpLassoSNP.RData")
save.image("grpLassoSNP.RData")
