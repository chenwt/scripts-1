#!/usr/bin/python
#J.HE
#input: <file:snp.annot file> <file: exp annot file>
#output: <file: Gene-SNP pair with p-value for U/KW test>

import os
import sys, getopt
import math
import re
from rpy import *
from scipy import stats
import numpy as np

argv = sys.argv[1:]
inp1 = ''
inp2 = ''
outp = ''
try:
  opts,args = getopt.getopt(argv,"hs:e:o:",["snpfile=","expfile'","ofile="])
except getopt.GetoptError:
  print 'python filterSNP_utest_KWtest.py -s <snp annotation file> -e <exp annotation file> -o <output file name>' 
  sys.exit(2)

for opt, arg in opts:
  if opt == '-h':
  	print 'python linkSNO_EXO.py -s <snp annotation file> -e <exp annotation file> -o <output file name>'
  	sys.exit()
  elif opt in ("-s","--snpfile"):
    inp1 = arg
  elif opt in ("-e","--expfile"):
    inp2 = arg
  elif opt in ("-o","--ofile"):
    outp = arg
    outlog = outp + ".log"
if inp1 == '' or inp2 == '' or outp == '':
	print "input parameter ERROR!"
	print "python linkSNO_EXO.py -s <snp annotation file> -e <exp annotation file> -o <output file name> "
	sys.exit(2)

print('Input file:' + inp1)
print('Database file:' + inp2)
print('Output file:'+ outp)
print('Log file:'+ outlog)

cutoff = 100000000
chroms = range(1,23) + ['X','Y','x','y'] + map(str,range(1,23))
fdr_cut = 1e-8  

# load all gene's tss information with expression data
chrArrayExp = [{} for _ in range(24)]
with open(inp2) as inp2f:
	for i, line in enumerate(inp2f): 
		if i == 0:
			continue
		else:
			[genename,chrom,pos,strand,val] = line.strip().split("\t",4)
			if chrom in chroms :
				tempP = pos.split(":")
				if len(tempP) > 1 :
					tempP = map(int,tempP)
					if  strand == "+" :
						pos = min(tempP)
					elif strand == "-" :
						pos = max(tempP)
					else:
						print "ERROR! Strand information error!"
						break
				else :
					pos = int(pos)

				if chrom == "X" :
					chrom = 23
				if chrom == "Y":
					chrom = 24
				chrom = int(chrom)
				if chrom in range(1,25) :
					chrArrayExp[chrom - 1][pos]=[genename,strand,val]
				else :
					continue
			else:
				continue
print "Total Number of Genes input: " + str(i+1)

def isInRange(x,y,cut):
	return math.fabs(int(x)-int(y)) < int(cut)

def rUTest(x,y):
	if len(x) != len(y):
		print "ERROR: different lenght for Utest"
		sys.exit(2)
	else:
		p = r.wilcox_test(x,y)['p.value']
		z = r.wilcox_test(x,y)['statistic']['W']
	return([z,'%e' % float(p)])
def kwTest(xlist,ylist):
  x = np.array(xlist)
  y = np.array(ylist)
  [t,p] = stats.mstats.kruskalwallis(x,y)
  return([t,'%e' % float(p)])

# load 
outpf = open(outp,'w')

outpf.write("Gene\tSNP\tZscore\tpval\n")
resultArray = []
snpdataDict ={}
with open(inp1) as inp1f:
	for i, line in enumerate(inp1f):
		if i == 0:
			continue
		else:
			[snpname,chrom,pos,strand,val] = line.strip().split("\t",4)
			snpdataDict[snpname] = [chrom,pos,strand,val]		
			print "snpname\t" + snpname
			if chrom in chroms:
				pos = int(pos)
				if chrom == "X" :
					chrom = 23
				if chrom == "Y":
					chrom = 24
				chrom = int(chrom)
				if chrom in range(1,25) :
					print "chrom\t" + str(chrom)
					for key in chrArrayExp[chrom - 1].keys():
						if isInRange(pos,key,cutoff):
							print "pos : \t" + str(pos) + "\t in range of \t" + str(key)
							exp_data = chrArrayExp[chrom - 1][key][2]
							snp_data = val
							snpval = map(int,snp_data.strip().split("\t"))
							e = chrArrayExp[chrom - 1][key][2]
							exp = map(float,re.compile("\s+").split(e.strip()))
							#[zscore,pval] = rUTest(exp,snpval)
							[zscore,pval] = kwTest(exp,snpval)
							print "zscore:" + str(zscore) + "\t" + "pvalue" + str(pval) 
							outpf.write(chrArrayExp[chrom - 1][key][0]  \
								+ "\t" + snpname + "\t" \
								+ str(zscore) + "\t" + str(pval) + "\t" \
								+ "\n")
				else :
					continue
			else:
				continue
outpf.close()
os.system('~/tools/R/R_current/bin/Rscript /ifs/home/c2b2/ac_lab/jh3283/scripts/projFocus/ceRNA/pvalAdj.r ' + outp  )
os.system('cp ' + outp + ' ' + outp +'.bak'  )
print "running r adjustment"
outpf = open(outp,'w')
with open(outp + ".adjusted") as inp2:
  for i,line in enumerate(inp2):
    if i ==0:
      pass
    else:
      [gene,snpname,val] = line.strip().split("\t",2)
      outpf.write(snpname,"\t", "\t".join(snpdataDict[snpname]) + "\n")
print str(i+1) + "SNPs kept"
outpf.close()
print "#--------------DONE-------"
